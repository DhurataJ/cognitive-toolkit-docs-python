### YamlMime:PythonModule
uid: cntk.layers.higher_order_layers
name: higher_order_layers
fullName: cntk.layers.higher_order_layers
summary: 'Higher-order functions, like <xref:Sequential> and <xref:ResNetBlock>. Note
  that

  sequential higher-order functions like <xref:cntk.layers.sequence.Recurrence> are
  in <xref:cntk.layers.sequence>.'
functions:
- uid: cntk.layers.higher_order_layers.For
  name: For
  summary: 'Layer factory function to create a composite through a pattern similar
    to Python''s *for* statement.


    This layer factory loops over the given range and passes each value to the constructor
    function.

    It is equivalent to

    `Sequential([constructor(i) for i in what_range])`.


    It is acceptable that `constructor` takes no argument.'
  signature: For(what_range, constructor, name='')
  parameters:
  - name: what_range
    description: a Python range to loop over
    types:
    - <xref:range>
  - name: constructor
    description: lambda that constructs a layer
    types:
    - <xref:Python function/lambda with 1>
    - <xref:0 arguments>
  - name: name
  return:
    description: A function that accepts one argument and applies the layers as constructed
      by `constructor` one after another.
    types:
    - <xref:cntk.ops.functions.Function>
  examples:
  - "\n```\n\n>>> from cntk.layers import *\n>>> from cntk.ops import relu\n```\n\n\
    \n```\n\n>>> # stack of 3 Dense relu layers\n>>> model = For(range(3), lambda:\
    \ Dense(2000, activation=relu))\n```\n\n\n```\n\n>>> # version of the above that\
    \ has no activation for the last layer\n>>> model = For(range(3), lambda i: Dense(2000,\
    \ activation=relu if i < 2 else identity))\n```\n\n\n```\n\n>>> # complex example\
    \ that uses For() inside Sequential()\n>>> with default_options(activation=relu,\
    \ pad=True):  # default activation is relu\n...     model = Sequential([\n...\
    \          For(range(2), lambda : [\n...              Convolution2D((3,3), 64),\n\
    ...              Convolution2D((3,3), 64),\n...              MaxPooling((3,3),\
    \ strides=2)\n...          ]),\n...          Label('ndfeat'),              # name\
    \ this specific value\n...          For(range(2), lambda i: [     # this passes\
    \ a nested list to Sequential\n...              Dense([256,128][i]),      # layer\
    \ index i used to index into an array of parameters\n...              Dropout(0.5)\n\
    ...          ]),\n...          Label('hidden'),\n...          Dense(10, activation=None)\
    \    # activation parameter overrides default (which was set to relu)\n...   \
    \   ])\n>>> model.update_signature((3,32,32))      # RGB, 32 x 32 pixels\n>>>\
    \ model.ndfeat.shape                     # shape at top of convo/pooling pyramid\n\
    \    (64, 8, 8)\n>>> model.hidden.shape                     # shape before classifier\n\
    \    (128,)\n```\n"
- uid: cntk.layers.higher_order_layers.ResNetBlock
  name: ResNetBlock
  summary: 'Layer factory function to create a composite that adds a skip connection
    to a function.

    This is equivalent to `Sequential((f, identity), plus)`.'
  signature: ResNetBlock(f, name='')
  parameters:
  - name: f
    description: the function to add the skip connection to.
    types:
    - <xref:cntk.ops.functions.Function>
    - <xref:equivalent Python function>
  - name: name
  return:
    description: A function that accepts one argument, applies `f` to it, and adds
      the original argument.
    types:
    - <xref:cntk.ops.functions.Function>
  examples:
  - '

    ```


    >>> # a ResNet layer

    >>> from cntk.layers import *

    >>> from cntk.ops import relu

    >>> resnet_layer = Sequential([ResNetBlock(Convolution((3,3), 64, activation=None)),
    relu])

    ```

    '
- uid: cntk.layers.higher_order_layers.Sequential
  name: Sequential
  summary: 'Layer factory function to create a composite that applies a sequence of
    layers (or any functions) onto an input.

    `Sequential ([F, G, H])(x)` means the same as `H(G(F(x)))`.


    The list of functions may also include tuples of functions. In that case, each
    function

    in a tuple is applied to the input, and the result is a tuple containing the results
    of

    these function applications. If followed by another function (typ. `plus` or `splice`),

    the tuple items form the arguments to that function.


    Intermediate values in the chain can be accessed by name by inserting a `Label(name=...)`
    layer.


    Note: An equivalent way of writing `Sequential ([F, G, H])(x)` is `F >> G >> H`.'
  signature: Sequential(layers, name='')
  parameters:
  - name: layers
    description: 'the list of functions to apply in sequence.

      A tuple aplies each of its items to the input and results in a tuple value.

      An item that is a list will be flattened.'
    types:
    - <xref:list of cntk.ops.functions.Function>, <xref:equivalent Python functions>,
      <xref:tuples of functions,>
    - <xref:lists thereof>
  - name: name
  return:
    description: A function that accepts one argument and applies the given `functions`
      one after another.
    types:
    - <xref:cntk.ops.functions.Function>
  examples:
  - "\n```\n\n>>> from cntk.layers import *\n```\n\n\n```\n\n>>> # sequence classifier.\
    \ Maps a one-hot word sequence to a scalar probability value.\n>>> # The recurrence\
    \ is a Fold(), meaning only the final hidden state is produced.\n>>> # The Label()\
    \ layer allows to access the final hidden layer by name.\n>>> model = Sequential([Embedding(300),\
    \ Fold(LSTM(500)), Label('hidden'), Dense(1, activation=sigmoid)])\n>>> model.update_signature(Sequence[Tensor[30000]])\n\
    >>> model.hidden.shape\n    (500,)\n```\n\n\n```\n\n>>> # simple example that\
    \ squares an input value\n>>> f = Sequential([C.log, lambda x: 2 * x, C.exp])\
    \  # the second function is a Python lambda\n>>> f.update_signature(1)\n>>> f([np.array([2])])\
    \     # log, times 2, exp is the same as computing the square\n    array([[ 4.]],\
    \ dtype=float32)\n```\n\n\n```\n\n>>> # using function tuples to implement a bidirectional\
    \ LSTM\n>>> bi_lstm = Sequential([(Recurrence(LSTM(250)),                    \
    \  # first tuple entry: forward pass\n...                        Recurrence(LSTM(250),\
    \ go_backwards=True)),  # second: backward pass\n...                       splice])\
    \                                     # splice both on top of each other\n```\n\
    \n\n```\n\n>>> # using function tuple to implement a ResNet block\n>>> # The function\
    \ tuple applies all items to the input, and emits a tuple with the results\n>>>\
    \ # that then act as the arguments to the next one.\n>>> # Here we say (Convolution(),\
    \ identity), which generates two arguments to the next function,\n>>> # the first\
    \ being the convolution, the second being the input passed through.\n>>> # Following\
    \ that with plus() implements the ResNet formula.\n>>> from cntk.ops import plus,\
    \ relu\n>>> resnet_layer = Sequential([(Convolution((3,3), 64, activation=None),\
    \ # first tuple entry\n...                             identity),            \
    \                   # second tuple entry is a pass-through\n...              \
    \              plus,                                     # this sums both\n...\
    \                            relu])                                    # activation\
    \ applied afterwards\n```\n\n\n```\n\n>>> # simple function-tuples example with\
    \ values\n>>> f = Sequential([(lambda x: x * x, identity), splice])  # computes\
    \ tuple (x^2, x) and splices both values\n>>> f.update_signature(1)\n>>> f([np.array([2])])\n\
    \    array([[ 4.,  2.]], dtype=float32)\n```\n"
- uid: cntk.layers.higher_order_layers.SequentialClique
  name: SequentialClique
  summary: 'Layer factory function to create a composite that applies a sequence of
    functions onto an input,

    with skip connections between all function. I.e. each function receives a sum
    of the input and all

    prior functions'' outputs.'
  signature: SequentialClique(functions, name='')
  parameters:
  - name: functions
    description: functions to be applied.
    types:
    - <xref:single>
    - <xref:list of cntk.ops.functions.Function>
  - name: name
  return:
    description: A function that accepts one argument and applies the sequence of
      functions.
    types:
    - <xref:cntk.ops.functions.Function>
  examples:
  - "\n```\n\n>>> from cntk.layers import *\n>>> from cntk.ops import abs, sqrt, square\n\
    >>> x = C.input_variable(2)\n>>> seq_clique = SequentialClique([abs, sqrt, square])\n\
    >>> seq_clique(x).eval(np.array([2, 8], np.float32)) # 400 = square((8 + abs(8))\
    \ + sqrt(8 + abs(8)))\n    array([[  36.,  400.]], dtype=float32)\n```\n"
