### YamlMime:PythonModule
uid: cntk.logging.graph
name: graph
fullName: cntk.logging.graph
functions:
- uid: cntk.logging.graph.depth_first_search
  name: depth_first_search
  summary: 'Generic function that walks through the graph starting at `root` and

    uses function `visitor` on each node to check whether it should be

    returned.'
  signature: depth_first_search(root, visitor, depth=0)
  parameters:
  - name: root
    description: the root to start the journey from
    isRequired: true
    types:
    - <xref:cntk.ops.functions.Function>
    - <xref:cntk.variables.Variable>
  - name: visitor
    description: 'function that takes a node as

      argument and returns `True` if that node should be returned.'
    isRequired: true
    types:
    - <xref:Python function>
    - <xref:lambda>
  - name: depth
    description: 'how deep into the block hierarchy the DFS

      algorithm should go into. Set to -1 for infinite depth.'
    defaultValue: '0'
    types:
    - <xref:int>, <xref:default 0>
  return:
    description: List of functions, for which `visitor` was `True`
- uid: cntk.logging.graph.find_all_with_name
  name: find_all_with_name
  summary: 'Finds functions in the graph starting from `node` and doing a depth-first

    search.'
  signature: find_all_with_name(node, node_name, depth=0)
  parameters:
  - name: node
    description: the node to start the journey from
    isRequired: true
    types:
    - <xref:cntk.ops.functions.Function>
    - <xref:cntk.variables.Variable>
  - name: node_name
    description: name for which we are search nodes
    isRequired: true
    types:
    - <xref:str>
  - name: depth
    description: 'how deep into the block hierarchy the DFS

      algorithm should go into. Set to -1 for infinite depth.'
    defaultValue: '0'
    types:
    - <xref:int>, <xref:default 0>
  return:
    description: List of primitive (or block) functions having the specified name
  seeAlsoContent: "  <xref:cntk.ops.functions.Function.find_all_with_name> in class\n\
    \  <xref:cntk.ops.functions.Function>.\n"
- uid: cntk.logging.graph.find_by_name
  name: find_by_name
  summary: 'Finds a function in the graph starting from `node` and doing a depth-first

    search. It assumes that the name occurs only once.'
  signature: find_by_name(node, node_name, depth=0)
  parameters:
  - name: node
    description: the node to start the journey from
    isRequired: true
    types:
    - <xref:cntk.ops.functions.Function>
    - <xref:cntk.variables.Variable>
  - name: node_name
    description: name for which we are search nodes
    isRequired: true
    types:
    - <xref:str>
  - name: depth
    description: 'how deep into the block hierarchy the DFS

      algorithm should go into. Set to -1 for infinite depth.'
    defaultValue: '0'
    types:
    - <xref:int>, <xref:default 0>
  return:
    description: Primitive (or block) function having the specified name
  seeAlsoContent: "  <xref:cntk.ops.functions.Function.find_by_name> in class\n  <xref:cntk.ops.functions.Function>.\n"
- uid: cntk.logging.graph.get_node_outputs
  name: get_node_outputs
  summary: 'Walks through every node of the graph starting at `node`

    and returns a list of all node outputs.'
  signature: get_node_outputs(node, depth=0)
  parameters:
  - name: node
    description: the node to start the journey from
    isRequired: true
    types:
    - <xref:graph node>
  - name: depth
    defaultValue: '0'
  return:
    description: A list of all node outputs
- uid: cntk.logging.graph.plot
  name: plot
  summary: "Walks through every node of the graph starting at `root`,\ncreates a network\
    \ graph, and returns a network description. If `filename` is\nspecified, it outputs\
    \ a DOT, PNG, PDF, or SVG file depending on the file name's suffix.\n\nRequirements:\n\
    \n   * for DOT output: [pydot_ng](https://pypi.python.org/pypi/pydot-ng) \n\n\
    \   * for PNG, PDF, and SVG output: [pydot_ng](https://pypi.python.org/pypi/pydot-ng)\
    \ and [graphviz](http://graphviz.org) (GraphViz executable has to be in the system's\
    \ PATH)."
  signature: plot(root, filename=None)
  parameters:
  - name: node
    description: the node to start the journey from
    isRequired: true
    types:
    - <xref:graph node>
  - name: filename
    description: 'file with extension ''.dot'', ''png'', ''pdf'', or ''svg''

      to denote what format should be written. If *None* then nothing

      will be plotted, and the returned string can be used to debug the graph.'
    defaultValue: None
    types:
    - <xref:str>, <xref:default None>
  return:
    description: '*str* describing the graph'
