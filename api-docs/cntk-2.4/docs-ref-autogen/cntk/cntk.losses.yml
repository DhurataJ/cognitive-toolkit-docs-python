### YamlMime:PythonPackage
uid: cntk.losses
name: losses
fullName: cntk.losses
summary: Loss functions.
type: import
functions:
- uid: cntk.losses.binary_cross_entropy
  name: binary_cross_entropy
  summary: Computes the binary cross entropy (aka logistic loss) between the `output`
    and `target`.
  signature: binary_cross_entropy(output, target, name='')
  parameters:
  - name: output
    description: the computed posterior probability for a variable to be 1 from the
      network (typ. a `sigmoid`)
    isRequired: true
  - name: target
    description: ground-truth label, 0 or 1
    isRequired: true
  - name: name
    description: the name of the Function instance in the network
    isRequired: true
    types:
    - <xref:str>, <xref:optional>
  return:
    description: <xref:cntk.ops.functions.Function>
- uid: cntk.losses.cosine_distance
  name: cosine_distance
  summary: 'Computes the cosine distance between `x` and `y`:'
  signature: cosine_distance(x, y, name='')
  parameters:
  - name: x
    description: numpy array or any <xref:cntk.ops.functions.Function> that outputs
      a tensor
    isRequired: true
  - name: name
    description: the name of the Function instance in the network
    isRequired: true
    types:
    - <xref:str>, <xref:optional>
  return:
    description: <xref:cntk.ops.functions.Function>
  examples:
  - "\n```\n\n>>> a = np.asarray([-1, -1, -1, 1, 1, -1, 1, 1, -1, 1, 1, -1]).reshape(3,2,2)\n\
    >>> b = np.asarray([1, 1, -1, 1, 1, -1, 1, -1, -1, -1, -1, 1]).reshape(3,2,2)\n\
    >>> x = C.sequence.input_variable(shape=(2,))\n>>> y = C.sequence.input_variable(shape=(2,))\n\
    >>> np.round(C.cosine_distance(x,y).eval({x:a,y:b}),5)\narray([[-1.,  1.],\n \
    \      [ 1.,  0.],\n       [ 0., -1.]], dtype=float32)\n```\n"
- uid: cntk.losses.cosine_distance_with_negative_samples
  name: cosine_distance_with_negative_samples
  summary: 'Given minibatches for `x` and `y`, this function computes for each element
    in *x* the cosine distance between

    it and the corresponding *y* and additionally the cosine distance between `x`
    and some other elements of `y`

    (referred to a negative samples). The `x` and `y` pairs are samples often derived

    from embeddings of textual data, though the function can be used for any form
    of numeric encodings.

    When using this function to compute textual similarity, `x` represents search
    query term embedding

    and `y` represents a document embedding. The negative samples are formed on the
    fly by shifting

    the right side (`y`). The `shift` indicates how many samples in `y` one should
    shift while

    forming each negative sample pair. It is often chosen to be 1. As the name suggests

    `num_negative_samples` indicates how many negative samples one would want to generate.'
  signature: cosine_distance_with_negative_samples(x, y, shift, num_negative_samples,
    name='')
  parameters:
  - name: x
    description: numpy array or any <xref:cntk.ops.functions.Function> that outputs
      a tensor
    isRequired: true
  - name: y
    description: numpy array or any <xref:cntk.ops.functions.Function> that outputs
      a tensor
    isRequired: true
  - name: shift
    description: non-zero positive integer representing number of shift to generate
      a negative sample
    isRequired: true
  - name: num_negative_samples
    description: number of negative samples to generate, a non-zero positive integer
    isRequired: true
  - name: name
    description: the name of the Function instance in the network
    isRequired: true
    types:
    - <xref:str>, <xref:optional>
  return:
    description: <xref:cntk.ops.functions.Function>
  examples:
  - "\n```\n\n>>> qry = np.asarray([1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1.],\
    \ dtype=np.float32).reshape(3, 1, 4)\n>>> doc = np.asarray([1., 1., 0., 0., 0.,\
    \ 1., 1., 0., 0., 0., 1., 1.], dtype=np.float32).reshape(3, 1, 4)\n>>> x = C.sequence.input_variable(shape=(4,))\n\
    >>> y = C.sequence.input_variable(shape=(4,))\n>>> model = C.cosine_distance_with_negative_samples(x,\
    \ y, shift=1, num_negative_samples=2)\n>>> np.round(model.eval({x: qry, y: doc}),\
    \ decimals=4)\narray([[[ 1. ,  0.5,  0. ]],\n\n       [[ 1. ,  0.5,  0.5]],\n\n\
    \       [[ 1. ,  0. ,  0.5]]], dtype=float32)\n```\n"
- uid: cntk.losses.cross_entropy_with_softmax
  name: cross_entropy_with_softmax
  summary: 'This operation computes the cross entropy between the `target_vector`
    and

    the softmax of the `output_vector`. The elements of `target_vector`

    have to be non-negative and should sum to 1. The `output_vector` can

    contain any values. The function will internally compute the softmax of

    the `output_vector`. Concretely,

    with the understanding that the implementation can use equivalent formulas

    for efficiency and numerical stability.'
  signature: cross_entropy_with_softmax(output_vector, target_vector, axis=- 1, name='')
  parameters:
  - name: output_vector
    description: the unscaled computed output values from the network
    isRequired: true
  - name: target_vector
    description: 'usually it is one-hot vector where the hot bit

      corresponds to the label index. But it can be any probability

      distribution over the labels.'
    isRequired: true
  - name: axis
    description: 'if given, cross entropy will be computed

      along this axis'
    isRequired: true
    types:
    - <xref:int>
    - <xref:cntk.axis.Axis>, <xref:optional>
  - name: name
    description: the name of the Function instance in the network
    isRequired: true
    types:
    - <xref:str>, <xref:optional>
  return:
    description: <xref:cntk.ops.functions.Function>
  examples:
  - '

    ```


    >>> C.cross_entropy_with_softmax([[1., 1., 1., 50.]], [[0., 0., 0., 1.]]).eval()

    array([[ 0.]], dtype=float32)

    ```



    ```


    >>> C.cross_entropy_with_softmax([[1., 2., 3., 4.]], [[0.35, 0.15, 0.05, 0.45]]).eval()

    array([[ 1.84019]], dtype=float32)

    ```

    '
- uid: cntk.losses.lambda_rank
  name: lambda_rank
  summary: 'Groups samples according to `group`, sorts

    them within each group based on `output` and

    computes the Normalized Discounted Cumulative Gain

    (NDCG) at infinity for each group. Concretely,

    the Discounted Cumulative Gain (DCG) at infinity is:

    where  means the gain of the -th ranked sample.

    The NDCG is just the DCG  divided by the maximum achievable DCG (obtained

    by placing the samples with the largest gain at the top of the ranking).

    Samples in the same group must appear in order of decreasing gain.

    It returns 1 minus the average NDCG across all the groups in the minibatch

    multiplied by 100 times the number of samples in the minibatch.

    In the backward direction it back-propagates LambdaRank gradients.'
  signature: lambda_rank(output, gain, group, name='')
  parameters:
  - name: output
    description: score of each sample
    isRequired: true
  - name: gain
    description: gain of each sample
    isRequired: true
  - name: group
    description: group of each sample
    isRequired: true
  - name: name
    description: the name of the Function instance in the network
    isRequired: true
    types:
    - <xref:str>, <xref:optional>
  return:
    description: <xref:cntk.ops.functions.Function>
  examples:
  - "\n```\n\n>>> group = C.input_variable((1,))\n>>> score = C.input_variable((1,),\
    \ needs_gradient=True)\n>>> gain  = C.input_variable((1,))\n>>> g = np.array([1,\
    \ 1, 2, 2], dtype=np.float32).reshape(4,1)\n>>> s = np.array([1, 2, 3, 4], dtype=np.float32).reshape(4,1)\n\
    >>> n = np.array([7, 1, 3, 1], dtype=np.float32).reshape(4,1)\n>>> f = C.lambda_rank(score,\
    \ gain, group)\n>>> np.round(f.grad({score:s, gain:n, group: g}, wrt=[score]),4)\n\
    array([[-0.2121],\n\n       [ 0.2121],\n\n       [-0.1486],\n\n       [ 0.1486]],\
    \ dtype=float32)\n```\n"
- uid: cntk.losses.lattice_sequence_with_softmax
  name: lattice_sequence_with_softmax
  signature: lattice_sequence_with_softmax(label, prediction, loglikelihood, lattice,
    symListPath, phonePath, stateListPath, transProbPath, hSmoothingWeight=0.95, frameDropThresh=1e-10,
    doReferenceAlign=False, seqGammarUsesMBR=False, seqGammarAMF=14.0, seqGammarLMF=14.0,
    seqGammarBMMIFactor=0.0, seqGammarWordPen=0.0, name='')
- uid: cntk.losses.nce_loss
  name: nce_loss
  summary: 'Computes the noise contrastive estimation loss. This implementation mostly

    follows Chris Dyer''s notes [1]. At a high level, this layer draws

    *num_samples* random labels from *noise_distribution* and then forms

    *num_samples`+1 binary classification problems where the true label is

    considered a positive example and the random labels are considered negative

    examples. The negatives are shared among all the examples in the

    minibatch. This operation only computes the logits for the labels in the

    minibatch and the random labels drawn from `noise_distribution*. The

    gradients will be sparse if the labels are sparse.

    The *noise_distribution* is read once and certain quantities are

    precomputed based on it. This operation will need to be reinstantiated if

    the *noise_distribution* changes.

    Shape inference for the weights is currently not supported when inputs are

    placeholders. Either a concrete input must be used or the weights must be

    provided without any inferred dimensions.'
  signature: nce_loss(weights, biases, inputs, labels, noise_distribution, num_samples=32,
    allow_duplicates=True, seed=auto_select, name='')
  parameters:
  - name: weights
    description: 'parameter (or variable in general) containing the weights with

      which inputs will be multiplied. Its shape must be

      (number of classes, dimension of input)'
    isRequired: true
  - name: biases
    description: 'parameter (or variable in general) containing the biases that

      will be added to the product of weights and inputs. Its shape must be

      (number of classes, 1)'
    isRequired: true
  - name: inputs
    description: 'vector of inputs to this layer. Multiplying by the weights and

      adding the biases gives the logits.'
    isRequired: true
  - name: labels
    description: a one-hot vector with the ground-truth labels.
    isRequired: true
  - name: noise_distribution
    description: 'a constant vector with dimension equal to the number

      of classes. The entries must be positive numbers but do not have to

      sum to 1. random labels will be drawn according to the normalized

      distribution.'
    isRequired: true
  - name: num_samples
    description: 'number of random labels that will be drawn from the

      *noise_distribution*.'
    isRequired: true
  - name: allow_duplicates
    description: 'boolean. If True (default), the random labels can

      contain duplicates. Compared to *allow_duplicates=False* it is faster

      but the quality of the approximations is slightly worse for the same

      number of samples.'
    isRequired: true
  - name: seed
    description: random seed. The default value selects a unique random seed.
    isRequired: true
  - name: name
    description: the name of the Function instance in the network
    isRequired: true
    types:
    - <xref:str>, <xref:optional>
  return:
    description: <xref:cntk.ops.functions.Function>
  examples:
  - '

    ```


    >>> import scipy

    >>> # dimensions of input, number of noise labels, batch size, number of classes

    >>> xdim = 10

    >>> samples = 32

    >>> batch = 4

    >>> classes = 100

    >>> # some variables; typically x will be the output of a layer

    >>> x = C.input_variable(xdim)

    >>> y = C.input_variable(classes, is_sparse=True)

    >>> # dummy data

    >>> x0 = np.arange(batch * xdim, dtype=np.float32).reshape((batch, xdim))/(batch
    * xdim)

    >>> data = np.ones(batch, dtype=np.float32)

    >>> indices = list(range(10, 10*batch+1, 10))

    >>> indptr = list(range(batch + 1))

    >>> y0 = scipy.sparse.csr_matrix((data, indices, indptr), shape=(batch, classes))

    >>> # a dummy noise distribution

    >>> q = np.arange(classes, dtype=np.float32) + 1 # normalization not necessary

    >>> # the parameters

    >>> b = C.parameter((classes, 1), init=-np.log(classes))

    >>> W = C.parameter((classes, C.InferredDimension), init=C.glorot_uniform(seed=98052))

    >>> # the loss

    >>> loss = C.nce_loss(W, b, x, y, q, seed=98052)

    >>> # evaluate the loss at our dummy data

    >>> np.round(loss.eval({x:x0, y:y0}), decimals=3)

    array([ 2.385,  3.035,  3.886,  3.868], dtype=float32)

    >>> # after training, use the logits for predictions

    >>> logits = C.times_transpose(x, W) + C.reshape(b, -1)

    ```

    '
  seeAlsoContent: '  [1] C. Dyer. [Notes on Noise Contrastive Estimation and Negative
    Sampling [pdf]](http://demo.clab.cs.cmu.edu/cdyer/nce_notes.pdf).

    '
- uid: cntk.losses.squared_error
  name: squared_error
  summary: 'This operation computes the sum of the squared difference between elements

    in the two input matrices. The result is a scalar (i.e., one by one matrix).

    This is often used as a training criterion.'
  signature: squared_error(output, target, name='')
  parameters:
  - name: output
    description: the output values from the network
    isRequired: true
  - name: target
    description: 'it is usually a one-hot vector where the hot bit

      corresponds to the label index'
    isRequired: true
  - name: name
    description: the name of the Function instance in the network
    isRequired: true
    types:
    - <xref:str>, <xref:optional>
  return:
    description: <xref:cntk.ops.functions.Function>
  examples:
  - '

    ```


    >>> i1 = C.input_variable((1,2))

    >>> i2 = C.input_variable((1,2))

    >>> C.squared_error(i1,i2).eval({i1:np.asarray([[[2., 1.]]], dtype=np.float32),
    i2:np.asarray([[[4., 6.]]], dtype=np.float32)})

    array([ 29.], dtype=float32)

    ```



    ```


    >>> C.squared_error(i1,i2).eval({i1:np.asarray([[[1., 2.]]], dtype=np.float32),
    i2:np.asarray([[[1., 2.]]], dtype=np.float32)})

    array([ 0.], dtype=float32)

    ```

    '
- uid: cntk.losses.weighted_binary_cross_entropy
  name: weighted_binary_cross_entropy
  summary: This operation computes the weighted binary cross entropy (aka logistic
    loss) between the `output` and `target`.
  signature: weighted_binary_cross_entropy(output, target, weight, name='')
  parameters:
  - name: output
    description: the computed posterior probability from the network
    isRequired: true
  - name: target
    description: ground-truth label, 0 or 1
    isRequired: true
  - name: weight
    description: weight of each example
    isRequired: true
  - name: name
    description: the name of the Function instance in the network
    isRequired: true
    types:
    - <xref:str>, <xref:optional>
  return:
    description: <xref:cntk.ops.functions.Function>
packages:
- cntk.losses.tests
