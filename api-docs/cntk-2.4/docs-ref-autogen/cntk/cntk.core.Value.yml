### YamlMime:PythonClass
uid: cntk.core.Value
name: Value
fullName: cntk.core.Value
module: cntk.core
inheritances:
- cntk.cntk_py.Value
summary: Internal representation of minibatch data.
constructor:
  syntax: Value(batch, seq_starts=None, device=None)
  parameters:
  - name: batch
    description: "batch input for *var*.\nIt can be:\n\n   * a pure Python structure\
      \ (list of lists, ...), \n\n   * a list of NumPy arrays or SciPy sparse CSR\
      \ matrices \n\n   * a <xref:cntk.core.Value> object (e.g. returned by <xref:cntk.core.Value.one_hot>)"
    isRequired: true
  - name: seq_starts
    description: 'if None, every sequence is

      treated as a new sequence. Otherwise, it is interpreted as a list of

      Booleans that tell whether a sequence is a new sequence (*True*) or a

      continuation of the sequence in the same slot of the previous

      minibatch (*False*)'
    isRequired: true
    types:
    - <xref:<xref:list of bools>>
    - <xref:None>
  - name: device
    description: 'device this value

      should be put on'
    isRequired: true
    types:
    - <xref:cntk.device.DeviceDescriptor>
methods:
- uid: cntk.core.Value.as_sequences
  name: as_sequences
  summary: 'Convert a Value to a sequence of NumPy arrays that have their masked

    entries removed.'
  signature: as_sequences(variable=None)
  parameters:
  - name: variable
    defaultValue: None
  return:
    description: 'If variable contains more dynamic axes than the batch axis, a list

      of NumPy arrays (if dense) or a SciPy CSR array (if sparse) will be

      returned. Otherwise, the arrays will be returned directly.'
- uid: cntk.core.Value.create
  name: create
  summary: Creates a <xref:cntk.core.Value> object.
  signature: static create(var, data, seq_starts=None, device=None, read_only=False)
  parameters:
  - name: var
    description: 'variable into which

      `data` is passed'
    isRequired: true
    types:
    - <xref:cntk.variables.Variable>
  - name: data
    description: "data for *var*.\nIt can be:\n\n   * a single NumPy array denoting\
      \ the full minibatch \n\n   * a list of NumPy arrays or SciPy sparse CSR matrices\
      \ \n\n   * a single NumPy array denoting one parameter or constant"
    isRequired: true
  - name: seq_starts
    description: 'if None, every sequence is

      treated as a new sequence. Otherwise, it is interpreted as a list of

      Booleans that tell whether a sequence is a new sequence (*True*) or a

      continuation of the sequence in the same slot of the previous

      minibatch (*False*)'
    isRequired: true
    types:
    - <xref:<xref:list of bools>>
    - <xref:None>
  - name: device
    description: 'device

      this value should be put on'
    isRequired: true
    types:
    - <xref:cntk.device.DeviceDescriptor>, <xref:default None>
  - name: read_only
    description: whether the data is read only
    isRequired: true
    types:
    - <xref:bool>, <xref:default False>
  return:
    description: <xref:cntk.core.Value> object.
- uid: cntk.core.Value.one_hot
  name: one_hot
  summary: 'Converts `batch` into a <xref:cntk.core.Value> object of `dtype`

    such that the integer data in `batch` is interpreted as the indices

    representing one-hot vectors. Use Value.ONE_HOT_SKIP for a zero vector'
  signature: static one_hot(batch, num_classes, dtype=None, device=None)
  parameters:
  - name: batch
    description: batch input data of indices
    isRequired: true
    types:
    - <xref:<xref:list of lists of integers>>
  - name: sample_shape
    description: 'number of classes or shape of each

      sample whose trailing axis is one_hot'
    isRequired: true
    types:
    - <xref:int>
    - <xref:tuple>
  - name: dtype
    description: data type
    isRequired: true
    types:
    - <xref:np.float32>, <xref:np.float64>, <xref:np.float16>, <xref:default None>
  - name: device
    description: 'device

      this value should be put on'
    isRequired: true
    types:
    - <xref:cntk.device.DeviceDescriptor>, <xref:default None>
  return:
    description: '`batch` converted into a <xref:cntk.core.Value> object that can
      be passed to

      the forward or eval function.'
  examples:
  - "\n```\n\n>>> num_classes = 6\n>>> sparse_indices = [[1,C.Value.ONE_HOT_SKIP,5],[4]]\n\
    >>> i0 = C.sequence.input_variable(shape=num_classes, is_sparse=True)\n>>> z =\
    \ C.times(i0, np.eye(num_classes))\n>>> value = C.Value.one_hot(sparse_indices,\
    \ num_classes)\n>>> z.eval({i0: value})\n[array([[ 0.,  1.,  0.,  0.,  0.,  0.],\n\
    \        [ 0.,  0.,  0.,  0.,  0.,  0.],\n        [ 0.,  0.,  0.,  0.,  0.,  1.]],\
    \ dtype=float32),\n array([[ 0.,  0.,  0.,  0.,  1.,  0.]], dtype=float32)]\n\n\
    >>> num_classes = 6\n>>> sample_shape = (2, num_classes)\n>>> sparse_indices =\
    \ [[1,5,3,2],[4,1]]\n>>> i0 = C.sequence.input_variable(shape=sample_shape, is_sparse=True)\n\
    >>> z = C.times(i0, np.eye(num_classes))\n>>> value = C.Value.one_hot(sparse_indices,\
    \ sample_shape)\n>>> z.eval({i0: value})\n[array([[[ 0.,  1.,  0.,  0.,  0., \
    \ 0.],\n         [ 0.,  0.,  0.,  0.,  0.,  1.]],\n        [[ 0.,  0.,  0.,  1.,\
    \  0.,  0.],\n         [ 0.,  0.,  1.,  0.,  0.,  0.]]], dtype=float32),\n array([[[\
    \ 0.,  0.,  0.,  0.,  1.,  0.],\n         [ 0.,  1.,  0.,  0.,  0.,  0.]]], dtype=float32)]\n\
    >>> # this example has no sequence axis:\n>>> num_classes = 6\n>>> sample_shape\
    \ = (num_classes,)\n>>> sparse_indices = [1,5,3,2]\n>>> i0 = C.input_variable(shape=sample_shape,\
    \ is_sparse=True)\n>>> z = C.times(i0, np.eye(num_classes))\n>>> value = C.Value.one_hot(sparse_indices,\
    \ sample_shape)\n>>> z.eval({i0: value})\narray([[ 0.,  1.,  0.,  0.,  0.,  0.],\n\
    \       [ 0.,  0.,  0.,  0.,  0.,  1.],\n       [ 0.,  0.,  0.,  1.,  0.,  0.],\n\
    \       [ 0.,  0.,  1.,  0.,  0.,  0.]], dtype=float32)\n```\n"
attributes:
- uid: cntk.core.Value.data
  name: data
  summary: Retrieves the underlying <xref:cntk.core.NDArrayView> instance.
- uid: cntk.core.Value.device
  name: device
  summary: Retrieves the <xref:cntk.device.DeviceDescriptor> instance.
- uid: cntk.core.Value.dtype
  name: dtype
  summary: NumPy data type of the instance
- uid: cntk.core.Value.is_read_only
  name: is_read_only
  summary: Whether the data is read-only
- uid: cntk.core.Value.is_sparse
  name: is_sparse
  summary: Whether the data is sparse or dense
- uid: cntk.core.Value.is_valid
  name: is_valid
  summary: Whether the value is valid or has been invalidated by another forward and/or
    backward pass
- uid: cntk.core.Value.mask
  name: mask
  summary: "The mask matrix of this value. Each row denotes a sequence with its\n\
    elements describing the mask of the element:\n* 2: beginning of sequence (e.g.\
    \ an LSTM would be reset) \n\n   * 1: valid element \n\n   * 0: invalid element"
  examples:
  - 'A mask of `[[2, 1, 1], [1, 1, 0]]` describes a batch of two

    sequences. The first has three elements, of which the first element

    (2) signals the beginning of a sequence. The second sequence has two

    elements (last element marked ''invalid'' by ''0''). As it starts with

    (1), it is a continuation of the 2nd sequence in the previous

    minibatch.

    '
- uid: cntk.core.Value.shape
  name: shape
  summary: 'The rectangular shape of this value. I.e., if this value has sequences

    of varying lengths, the shape will have the max sequence length in the

    sequence dimension.'
- uid: cntk.cntk_py.Value.one_hot_skip
  name: one_hot_skip
  signature: one_hot_skip = 18446744073709551615
- uid: cntk.core.Value.ONE_HOT_SKIP
  name: ONE_HOT_SKIP
  signature: ONE_HOT_SKIP = 18446744073709551615
