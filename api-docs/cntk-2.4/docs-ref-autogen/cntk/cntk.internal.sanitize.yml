### YamlMime:UniversalReference
api_name: []
items:
- children:
  - cntk.internal.sanitize.bounded_cache
  - cntk.internal.sanitize.data_type_to_dtype
  - cntk.internal.sanitize.is_byte_buffer
  - cntk.internal.sanitize.is_string
  - cntk.internal.sanitize.sanitize_2d_number
  - cntk.internal.sanitize.sanitize_Function_attributes
  - cntk.internal.sanitize.sanitize_axis
  - cntk.internal.sanitize.sanitize_axis_list
  - cntk.internal.sanitize.sanitize_batch
  - cntk.internal.sanitize.sanitize_convolution_args
  - cntk.internal.sanitize.sanitize_dtype_cntk
  - cntk.internal.sanitize.sanitize_dtype_numpy
  - cntk.internal.sanitize.sanitize_dynamic_axes
  - cntk.internal.sanitize.sanitize_function
  - cntk.internal.sanitize.sanitize_input
  - cntk.internal.sanitize.sanitize_multi_axis_reduction_list
  - cntk.internal.sanitize.sanitize_permutation
  - cntk.internal.sanitize.sanitize_pooling_args
  - cntk.internal.sanitize.sanitize_precision
  - cntk.internal.sanitize.sanitize_random_args
  - cntk.internal.sanitize.sanitize_range
  - cntk.internal.sanitize.sanitize_shape
  - cntk.internal.sanitize.sanitize_value
  - cntk.internal.sanitize.sanitize_var_map
  - cntk.internal.sanitize.sanitize_variable_or_function
  - cntk.internal.sanitize.sanitize_variable_value_dict
  - cntk.internal.sanitize.sanitize_variables_or_functions
  fullName: cntk.internal.sanitize
  langs:
  - python
  module: cntk.internal.sanitize
  name: sanitize
  type: module
  uid: cntk.internal.sanitize
- fullName: cntk.internal.sanitize.bounded_cache
  langs:
  - python
  module: cntk.internal.sanitize
  name: bounded_cache(maxsize)
  syntax:
    content: bounded_cache(maxsize)
    parameters:
    - id: maxsize
  type: function
  uid: cntk.internal.sanitize.bounded_cache
- fullName: cntk.internal.sanitize.data_type_to_dtype
  langs:
  - python
  module: cntk.internal.sanitize
  name: data_type_to_dtype(data_type)
  syntax:
    content: data_type_to_dtype(data_type)
    parameters:
    - id: data_type
  type: function
  uid: cntk.internal.sanitize.data_type_to_dtype
- fullName: cntk.internal.sanitize.is_byte_buffer
  langs:
  - python
  module: cntk.internal.sanitize
  name: is_byte_buffer(s)
  summary: 'Tests whether `s` is a byte buffer (not a string) in a way that

    works on Python 2 and 3.

    '
  syntax:
    content: is_byte_buffer(s)
    parameters:
    - id: s
  type: function
  uid: cntk.internal.sanitize.is_byte_buffer
- fullName: cntk.internal.sanitize.is_string
  langs:
  - python
  module: cntk.internal.sanitize
  name: is_string(s)
  summary: 'Tests whether `s` is a string in a way that works on Python 2 and 3.

    '
  syntax:
    content: is_string(s)
    parameters:
    - id: s
  type: function
  uid: cntk.internal.sanitize.is_string
- fullName: cntk.internal.sanitize.sanitize_2d_number
  langs:
  - python
  module: cntk.internal.sanitize
  name: sanitize_2d_number(x)
  summary: 'Convert `x` to a tuple.

    '
  syntax:
    content: sanitize_2d_number(x)
    parameters:
    - description: 'a scalar number or a tuple of length 2 that contains the 2D values.

        '
      id: x
    return:
      description: 'A tuple of length two.

        '
  type: function
  uid: cntk.internal.sanitize.sanitize_2d_number
- fullName: cntk.internal.sanitize.sanitize_Function_attributes
  langs:
  - python
  module: cntk.internal.sanitize
  name: sanitize_Function_attributes(attributes)
  syntax:
    content: sanitize_Function_attributes(attributes)
    parameters:
    - id: attributes
  type: function
  uid: cntk.internal.sanitize.sanitize_Function_attributes
- fullName: cntk.internal.sanitize.sanitize_axis
  langs:
  - python
  module: cntk.internal.sanitize
  name: sanitize_axis(axis)
  summary: 'Sanitizes the axis.

    '
  syntax:
    content: sanitize_axis(axis)
    parameters:
    - description: "the axis to be used.\n\n* <xref:cntk.axis.Axis>: use axis instance\
        \ directly (will convert row- to col-major in case of static axis). \n\n*\
        \ int: if positive, use it as static axis. If negative, count from last to\
        \ first axis \n\n* None: denote all available axes \n"
      id: axis
      type:
      - <xref:cntk.axis.Axis>
      - int
      - None
  type: function
  uid: cntk.internal.sanitize.sanitize_axis
- fullName: cntk.internal.sanitize.sanitize_axis_list
  langs:
  - python
  module: cntk.internal.sanitize
  name: sanitize_axis_list(axes)
  summary: 'Sanitizes a list of axes.

    '
  syntax:
    content: sanitize_axis_list(axes)
    parameters:
    - description: "the axes to be used.\n\n* <xref:cntk.axis.Axis>: use axis instance\
        \ directly (will convert row- to col-major in case of static axis). \n\n*\
        \ int: if positive, use it as static axis. If negative, count from last to\
        \ first axis \n\n* None: denote all available axes \n"
      id: axes
      type:
      - list of <xref:cntk.axis.Axis>
      - int
      - None
  type: function
  uid: cntk.internal.sanitize.sanitize_axis_list
- fullName: cntk.internal.sanitize.sanitize_batch
  langs:
  - python
  module: cntk.internal.sanitize
  name: sanitize_batch(var, batch, seq_starts=None, device=None)
  summary: 'Convert to <xref:cntk.core.Value>.

    '
  syntax:
    content: sanitize_batch(var, batch, seq_starts=None, device=None)
    parameters:
    - description: 'input variable into which

        `batch` is passed

        '
      id: var
      type:
      - <xref:cntk.variables.Variable>
    - description: "batch input for *var*. It can be\n\n* a single NumPy array denoting\
        \ the full minibatch \n\n* a list of NumPy arrays or SciPy sparse CSR matrices\
        \ each representing a sequence \n\n* a <xref:cntk.core.Value> object (e.g.\
        \ returned by <xref:cntk.core.Value.one_hot>) \n"
      id: batch
    - description: 'if None, every sequence is

        treated as a new sequence. Otherwise, it is interpreted as a list of

        Booleans one for each sequence in the batch that tell whether a

        sequence is a new sequence (*True*) or a continuation of the sequence

        in the same slot of the previous minibatch (*False*)

        '
      id: seq_starts
      type:
      - list of bools
      - None
    - description: 'device

        this value should be put on

        '
      id: device
      type:
      - <xref:cntk.device.DeviceDescriptor>, default None
    return:
      description: 'batch converted to a <xref:cntk.core.Value> instance that can
        be

        passed to the core API

        '
  type: function
  uid: cntk.internal.sanitize.sanitize_batch
- fullName: cntk.internal.sanitize.sanitize_convolution_args
  langs:
  - python
  module: cntk.internal.sanitize
  name: sanitize_convolution_args(strides, sharing, auto_padding)
  syntax:
    content: sanitize_convolution_args(strides, sharing, auto_padding)
    parameters:
    - id: strides
    - id: sharing
    - id: auto_padding
  type: function
  uid: cntk.internal.sanitize.sanitize_convolution_args
- fullName: cntk.internal.sanitize.sanitize_dtype_cntk
  langs:
  - python
  module: cntk.internal.sanitize
  name: sanitize_dtype_cntk(dtype)
  syntax:
    content: sanitize_dtype_cntk(dtype)
    parameters:
    - id: dtype
  type: function
  uid: cntk.internal.sanitize.sanitize_dtype_cntk
- fullName: cntk.internal.sanitize.sanitize_dtype_numpy
  langs:
  - python
  module: cntk.internal.sanitize
  name: sanitize_dtype_numpy(dtype)
  syntax:
    content: sanitize_dtype_numpy(dtype)
    parameters:
    - id: dtype
  type: function
  uid: cntk.internal.sanitize.sanitize_dtype_numpy
- fullName: cntk.internal.sanitize.sanitize_dynamic_axes
  langs:
  - python
  module: cntk.internal.sanitize
  name: sanitize_dynamic_axes(axes)
  syntax:
    content: sanitize_dynamic_axes(axes)
    parameters:
    - id: axes
  type: function
  uid: cntk.internal.sanitize.sanitize_dynamic_axes
- fullName: cntk.internal.sanitize.sanitize_function
  langs:
  - python
  module: cntk.internal.sanitize
  name: sanitize_function(arg)
  summary: 'Tries to retrieve a Function from the argument or raises a TypeError if

    that''s not possible.

    '
  syntax:
    content: sanitize_function(arg)
    parameters:
    - id: arg
  type: function
  uid: cntk.internal.sanitize.sanitize_function
- fullName: cntk.internal.sanitize.sanitize_input
  langs:
  - python
  module: cntk.internal.sanitize
  name: sanitize_input(arg, fallback_dtype=np.float32, reshape=None)
  summary: "Convert to <xref:cntk.variables.Variable> so that it can be passed\nas\
    \ Variable to the CNTK operators.\n\n   * If `arg` is a NumPy array and its type\
    \ is not among (*np.float32*, *np.float64*, *np.float16*), it sets it to *np.float32*.\
    \ \n\n   * If `arg` is an op, it is assumed that it has only one output, which\
    \ will be returned. \n"
  syntax:
    content: sanitize_input(arg, fallback_dtype=np.float32, reshape=None)
    parameters:
    - description: 'input

        '
      id: arg
      type:
      - number, NumPy array, <xref:cntk.variables.Variable>,
      - <xref:cntk.ops.functions.Function>
    - defaultValue: <class 'numpy.float32'>
      description: 'fallback dtype in case `arg` is a list

        '
      id: fallback_dtype
      type:
      - NumPy dtype
    - defaultValue: None
      id: reshape
    return:
      description: 'Leaves Constant, Parameter, and Variable as is. Returns Constant,
        if

        `arg` is a number or NumPy array. Variable otherwise.

        '
  type: function
  uid: cntk.internal.sanitize.sanitize_input
- fullName: cntk.internal.sanitize.sanitize_multi_axis_reduction_list
  langs:
  - python
  module: cntk.internal.sanitize
  name: sanitize_multi_axis_reduction_list(axes)
  summary: 'Sanitizes a list of axes for multi-axis reduction which can not contain
    sequence axis.

    '
  syntax:
    content: sanitize_multi_axis_reduction_list(axes)
    parameters:
    - description: "the axes to be used.\n\n* <xref:cntk.axis.Axis>: use axis instance\
        \ directly (will convert row- to col-major in case of static axis). \n\n*\
        \ int: if positive, use it as static axis. If negative, count from last to\
        \ first axis \n\n* None: denote all available axes \n"
      id: axes
      type:
      - list of <xref:cntk.axis.Axis>
      - int
      - None
  type: function
  uid: cntk.internal.sanitize.sanitize_multi_axis_reduction_list
- fullName: cntk.internal.sanitize.sanitize_permutation
  langs:
  - python
  module: cntk.internal.sanitize
  name: sanitize_permutation(perm)
  syntax:
    content: sanitize_permutation(perm)
    parameters:
    - id: perm
  type: function
  uid: cntk.internal.sanitize.sanitize_permutation
- fullName: cntk.internal.sanitize.sanitize_pooling_args
  langs:
  - python
  module: cntk.internal.sanitize
  name: sanitize_pooling_args(pooling_window_shape, strides, auto_padding)
  syntax:
    content: sanitize_pooling_args(pooling_window_shape, strides, auto_padding)
    parameters:
    - id: pooling_window_shape
    - id: strides
    - id: auto_padding
  type: function
  uid: cntk.internal.sanitize.sanitize_pooling_args
- fullName: cntk.internal.sanitize.sanitize_precision
  langs:
  - python
  module: cntk.internal.sanitize
  name: sanitize_precision(precision)
  summary: 'Converts precision to NumPy precision

    '
  syntax:
    content: sanitize_precision(precision)
    parameters:
    - description: 'precision, if string

        it can be one of ''float'' ''float32, ''double'', ''float64'' or ''float16''

        '
      id: precision
      type:
      - str
      - np.float16
      - np.float32
      - np.float64
    return:
      description: 'NumPy precision

        '
  type: function
  uid: cntk.internal.sanitize.sanitize_precision
- fullName: cntk.internal.sanitize.sanitize_random_args
  langs:
  - python
  module: cntk.internal.sanitize
  name: sanitize_random_args(shape, dtype)
  syntax:
    content: sanitize_random_args(shape, dtype)
    parameters:
    - id: shape
    - id: dtype
  type: function
  uid: cntk.internal.sanitize.sanitize_random_args
- fullName: cntk.internal.sanitize.sanitize_range
  langs:
  - python
  module: cntk.internal.sanitize
  name: sanitize_range(x)
  summary: 'Convert `x` to a tuple such as the first element is less than or equal
    to the

    second element.

    '
  syntax:
    content: sanitize_range(x)
    parameters:
    - description: 'a scalar number or a tuple of length 2 that contains the range
        values.

        '
      id: x
    return:
      description: 'A tuple of length two where the first element is less than or
        equal to the

        second element.

        '
  type: function
  uid: cntk.internal.sanitize.sanitize_range
- fullName: cntk.internal.sanitize.sanitize_shape
  langs:
  - python
  module: cntk.internal.sanitize
  name: sanitize_shape(shape)
  summary: 'If shape is scalar, it creates a tuple out of it.

    '
  syntax:
    content: sanitize_shape(shape)
    parameters:
    - id: shape
  type: function
  uid: cntk.internal.sanitize.sanitize_shape
- fullName: cntk.internal.sanitize.sanitize_value
  langs:
  - python
  module: cntk.internal.sanitize
  name: sanitize_value(shape, value, dtype, device)
  summary: 'Converts a given `value` to an <xref:cntk.core.NDArrayView> object

    that can be passed to the CNTK core.

    '
  syntax:
    content: sanitize_value(shape, value, dtype, device)
    parameters:
    - description: 'shape of the value

        '
      id: shape
      type:
      - tuple
    - description: 'the value to

        be converted

        '
      id: value
      type:
      - None
      - value that can be cast to NumPy array
    - description: 'data type (np.float32 or np.float64)

        '
      id: dtype
    - description: 'device this value should be put

        on

        '
      id: device
      type:
      - <xref:cntk.device.DeviceDescriptor>
    return:
      description: '<xref:cntk.core.NDArrayView> object representing `value`

        '
  type: function
  uid: cntk.internal.sanitize.sanitize_value
- fullName: cntk.internal.sanitize.sanitize_var_map
  langs:
  - python
  module: cntk.internal.sanitize
  name: sanitize_var_map(op_arguments, arguments, precision=None, device=None, extract_values_from_minibatch_data=True)
  summary: 'Sanitizes a dictionary of *Variable* s to input data such that it can
    be

    handed off to the evaluation methods

    (<xref:cntk.ops.functions.Function.forward>,

    <xref:cntk.ops.functions.Function.backward>,

    <xref:cntk.train.trainer.Trainer.train_minibatch> and

    <xref:cntk.train.trainer.Trainer.test_minibatch>).

    '
  syntax:
    content: sanitize_var_map(op_arguments, arguments, precision=None, device=None,
      extract_values_from_minibatch_data=True)
    parameters:
    - description: 'arguments of the

        root function. In <xref:cntk.ops.functions.Function.forward> pass it

        is typically *op.arguments*, in

        <xref:cntk.ops.functions.Function.backward> pass it is *op.outputs*

        '
      id: op_arguments
      type:
      - <xref:cntk.ops.functions.Function>
    - description: "maps variables to their input data. The interpretation\ndepends\
        \ on the input type:\n\n   * dict: keys are input variable or names, and values\
        \ are the input data. \n\n   * any other type: if node has a unique input,\
        \ arguments is mapped to this input. \n\nFor nodes with more than one input,\
        \ only dict is allowed.\n\nIn both cases, every sample in the data will be\
        \ interpreted\nas a new sequence.\n\nSequences can be marked as continuations\
        \ of the same sequence in\nthe previous minibatch (that is the sequence in\
        \ the same slot).\nThere are two possibilities for this:\n\n   * specifying\
        \ arguments as a *tuple* where the first element is used as arguments and\
        \ the second one will be used as a list of bools, denoting whether a sequence\
        \ is a new one (*True*) or a continuation of the sequence in the same slot\
        \ of the previous minibatch (*False*). This will be applied to all batches.\
        \ \n\n   * specifying arguments as a dictionary of variables to tuples where\
        \ the first element is used as arguments and the second one will be used as\
        \ a list of bools, denoting whether a sequence is a new one (*True*) or a\
        \ continuation of the sequence in the same slot of the previous minibatch\
        \ (*False*). This will be applied to all batches. \n\nData should be either\
        \ NumPy arrays or a\n<xref:cntk.io.MinibatchData> instance.\n"
      id: arguments
    - defaultValue: None
      description: 'if string it can be

        one of ''float'' ''float32, ''double'', ''float64'', ''float16'', or None

        '
      id: precision
      type:
      - str
      - np.float32
      - np.float64
      - np.float16
    - defaultValue: None
      description: 'device

        this value should be put on

        '
      id: device
      type:
      - <xref:cntk.device.DeviceDescriptor>, default None
    - defaultValue: 'True'
      description: 'specifies if <xref:cntk.io.MinibatchData> instances in the arguments

        map are converted to the underlying value (<xref:cntk.core.Value>)

        instances (default), or if they should remain intact, as they contain

        additional meta information required by the Trainer (specifically, by

        the <xref:cntk.train.trainer.Trainer.train_minibatch> method).

        '
      id: extract_values_from_minibatch_data
      type:
      - bool, defaults to True
    return:
      description: '*dict* that maps variables to sanitized batches

        '
  type: function
  uid: cntk.internal.sanitize.sanitize_var_map
- fullName: cntk.internal.sanitize.sanitize_variable_or_function
  langs:
  - python
  module: cntk.internal.sanitize
  name: sanitize_variable_or_function(arg)
  summary: 'Tries to retrieve a Variable or Function from the argument or raises a

    TypeError if that''s not possible.

    '
  syntax:
    content: sanitize_variable_or_function(arg)
    parameters:
    - id: arg
  type: function
  uid: cntk.internal.sanitize.sanitize_variable_or_function
- fullName: cntk.internal.sanitize.sanitize_variable_value_dict
  langs:
  - python
  module: cntk.internal.sanitize
  name: sanitize_variable_value_dict(var_value_dict)
  syntax:
    content: sanitize_variable_value_dict(var_value_dict)
    parameters:
    - id: var_value_dict
  type: function
  uid: cntk.internal.sanitize.sanitize_variable_value_dict
- fullName: cntk.internal.sanitize.sanitize_variables_or_functions
  langs:
  - python
  module: cntk.internal.sanitize
  name: sanitize_variables_or_functions(arg)
  summary: 'Tries to retrieve a list of Variables or Functions from the argument or

    throws an exception if that''s not possible. If *arg* is not an iterable, it

    tries to return a list of a single item of the Variable or Function, or

    raises a TypeError, if that''s possible.

    '
  syntax:
    content: sanitize_variables_or_functions(arg)
    parameters:
    - id: arg
  type: function
  uid: cntk.internal.sanitize.sanitize_variables_or_functions
references:
- fullName: cntk.internal.sanitize.bounded_cache
  isExternal: false
  name: bounded_cache(maxsize)
  parent: cntk.internal.sanitize
  uid: cntk.internal.sanitize.bounded_cache
- fullName: cntk.internal.sanitize.data_type_to_dtype
  isExternal: false
  name: data_type_to_dtype(data_type)
  parent: cntk.internal.sanitize
  uid: cntk.internal.sanitize.data_type_to_dtype
- fullName: cntk.internal.sanitize.is_byte_buffer
  isExternal: false
  name: is_byte_buffer(s)
  parent: cntk.internal.sanitize
  uid: cntk.internal.sanitize.is_byte_buffer
- fullName: cntk.internal.sanitize.is_string
  isExternal: false
  name: is_string(s)
  parent: cntk.internal.sanitize
  uid: cntk.internal.sanitize.is_string
- fullName: cntk.internal.sanitize.sanitize_2d_number
  isExternal: false
  name: sanitize_2d_number(x)
  parent: cntk.internal.sanitize
  uid: cntk.internal.sanitize.sanitize_2d_number
- fullName: cntk.internal.sanitize.sanitize_Function_attributes
  isExternal: false
  name: sanitize_Function_attributes(attributes)
  parent: cntk.internal.sanitize
  uid: cntk.internal.sanitize.sanitize_Function_attributes
- fullName: cntk.internal.sanitize.sanitize_axis
  isExternal: false
  name: sanitize_axis(axis)
  parent: cntk.internal.sanitize
  uid: cntk.internal.sanitize.sanitize_axis
- fullName: cntk.internal.sanitize.sanitize_axis_list
  isExternal: false
  name: sanitize_axis_list(axes)
  parent: cntk.internal.sanitize
  uid: cntk.internal.sanitize.sanitize_axis_list
- fullName: cntk.internal.sanitize.sanitize_batch
  isExternal: false
  name: sanitize_batch(var, batch, seq_starts=None, device=None)
  parent: cntk.internal.sanitize
  uid: cntk.internal.sanitize.sanitize_batch
- fullName: cntk.internal.sanitize.sanitize_convolution_args
  isExternal: false
  name: sanitize_convolution_args(strides, sharing, auto_padding)
  parent: cntk.internal.sanitize
  uid: cntk.internal.sanitize.sanitize_convolution_args
- fullName: cntk.internal.sanitize.sanitize_dtype_cntk
  isExternal: false
  name: sanitize_dtype_cntk(dtype)
  parent: cntk.internal.sanitize
  uid: cntk.internal.sanitize.sanitize_dtype_cntk
- fullName: cntk.internal.sanitize.sanitize_dtype_numpy
  isExternal: false
  name: sanitize_dtype_numpy(dtype)
  parent: cntk.internal.sanitize
  uid: cntk.internal.sanitize.sanitize_dtype_numpy
- fullName: cntk.internal.sanitize.sanitize_dynamic_axes
  isExternal: false
  name: sanitize_dynamic_axes(axes)
  parent: cntk.internal.sanitize
  uid: cntk.internal.sanitize.sanitize_dynamic_axes
- fullName: cntk.internal.sanitize.sanitize_function
  isExternal: false
  name: sanitize_function(arg)
  parent: cntk.internal.sanitize
  uid: cntk.internal.sanitize.sanitize_function
- fullName: cntk.internal.sanitize.sanitize_input
  isExternal: false
  name: sanitize_input(arg, fallback_dtype=np.float32, reshape=None)
  parent: cntk.internal.sanitize
  uid: cntk.internal.sanitize.sanitize_input
- fullName: cntk.internal.sanitize.sanitize_multi_axis_reduction_list
  isExternal: false
  name: sanitize_multi_axis_reduction_list(axes)
  parent: cntk.internal.sanitize
  uid: cntk.internal.sanitize.sanitize_multi_axis_reduction_list
- fullName: cntk.internal.sanitize.sanitize_permutation
  isExternal: false
  name: sanitize_permutation(perm)
  parent: cntk.internal.sanitize
  uid: cntk.internal.sanitize.sanitize_permutation
- fullName: cntk.internal.sanitize.sanitize_pooling_args
  isExternal: false
  name: sanitize_pooling_args(pooling_window_shape, strides, auto_padding)
  parent: cntk.internal.sanitize
  uid: cntk.internal.sanitize.sanitize_pooling_args
- fullName: cntk.internal.sanitize.sanitize_precision
  isExternal: false
  name: sanitize_precision(precision)
  parent: cntk.internal.sanitize
  uid: cntk.internal.sanitize.sanitize_precision
- fullName: cntk.internal.sanitize.sanitize_random_args
  isExternal: false
  name: sanitize_random_args(shape, dtype)
  parent: cntk.internal.sanitize
  uid: cntk.internal.sanitize.sanitize_random_args
- fullName: cntk.internal.sanitize.sanitize_range
  isExternal: false
  name: sanitize_range(x)
  parent: cntk.internal.sanitize
  uid: cntk.internal.sanitize.sanitize_range
- fullName: cntk.internal.sanitize.sanitize_shape
  isExternal: false
  name: sanitize_shape(shape)
  parent: cntk.internal.sanitize
  uid: cntk.internal.sanitize.sanitize_shape
- fullName: cntk.internal.sanitize.sanitize_value
  isExternal: false
  name: sanitize_value(shape, value, dtype, device)
  parent: cntk.internal.sanitize
  uid: cntk.internal.sanitize.sanitize_value
- fullName: cntk.internal.sanitize.sanitize_var_map
  isExternal: false
  name: sanitize_var_map(op_arguments, arguments, precision=None, device=None, extract_values_from_minibatch_data=True)
  parent: cntk.internal.sanitize
  uid: cntk.internal.sanitize.sanitize_var_map
- fullName: cntk.internal.sanitize.sanitize_variable_or_function
  isExternal: false
  name: sanitize_variable_or_function(arg)
  parent: cntk.internal.sanitize
  uid: cntk.internal.sanitize.sanitize_variable_or_function
- fullName: cntk.internal.sanitize.sanitize_variable_value_dict
  isExternal: false
  name: sanitize_variable_value_dict(var_value_dict)
  parent: cntk.internal.sanitize
  uid: cntk.internal.sanitize.sanitize_variable_value_dict
- fullName: cntk.internal.sanitize.sanitize_variables_or_functions
  isExternal: false
  name: sanitize_variables_or_functions(arg)
  parent: cntk.internal.sanitize
  uid: cntk.internal.sanitize.sanitize_variables_or_functions
- fullName: <xref:cntk.device.DeviceDescriptor>, default None
  name: DeviceDescriptor>, default None
  spec.python:
  - fullName: <xref:cntk.device.DeviceDescriptor>
    name: DeviceDescriptor>
    uid: <xref:cntk.device.DeviceDescriptor>
  - fullName: ', '
    name: ', '
  - fullName: default None
    name: default None
    uid: default None
  uid: <xref:cntk.device.DeviceDescriptor>, default None
- fullName: number, NumPy array, <xref:cntk.variables.Variable>,
  name: number, NumPy array, Variable>,
  spec.python:
  - fullName: number
    name: number
    uid: number
  - fullName: ', '
    name: ', '
  - fullName: NumPy array
    name: NumPy array
    uid: NumPy array
  - fullName: ', '
    name: ', '
  - fullName: <xref:cntk.variables.Variable>,
    name: Variable>,
    uid: <xref:cntk.variables.Variable>,
  uid: number, NumPy array, <xref:cntk.variables.Variable>,
- fullName: bool, defaults to True
  name: bool, defaults to True
  spec.python:
  - fullName: bool
    name: bool
    uid: bool
  - fullName: ', '
    name: ', '
  - fullName: defaults to True
    name: defaults to True
    uid: defaults to True
  uid: bool, defaults to True
