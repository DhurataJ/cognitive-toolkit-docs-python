### YamlMime:PythonClass
uid: cntk.contrib.netopt.custom_convolution_ops.Multibit
name: Multibit
fullName: cntk.contrib.netopt.custom_convolution_ops.Multibit
module: cntk.contrib.netopt.custom_convolution_ops
inheritances:
- cntk.ops.functions.UserFunction
constructor:
  syntax: Multibit(arg1, arg2, name='Multibit')
methods:
- uid: cntk.contrib.netopt.custom_convolution_ops.Multibit.backward
  name: backward
  signature: backward(state, root_gradients)
  parameters:
  - name: state
    isRequired: true
  - name: root_gradients
    isRequired: true
- uid: cntk.contrib.netopt.custom_convolution_ops.Multibit.clone
  name: clone
  signature: clone(cloned_inputs)
  parameters:
  - name: cloned_inputs
    isRequired: true
- uid: cntk.contrib.netopt.custom_convolution_ops.Multibit.deserialize
  name: deserialize
  signature: deserialize(inputs, name, state)
  parameters:
  - name: inputs
    isRequired: true
  - name: name
    isRequired: true
  - name: state
    isRequired: true
- uid: cntk.contrib.netopt.custom_convolution_ops.Multibit.forward
  name: forward
  signature: forward(argument, device, outputs_to_retain)
  parameters:
  - name: argument
    isRequired: true
  - name: device
    isRequired: true
  - name: outputs_to_retain
    isRequired: true
- uid: cntk.contrib.netopt.custom_convolution_ops.Multibit.gradFunc
  name: gradFunc
  signature: gradFunc(arg)
  parameters:
  - name: arg
    isRequired: true
- uid: cntk.contrib.netopt.custom_convolution_ops.Multibit.infer_outputs
  name: infer_outputs
  signature: infer_outputs()
- uid: cntk.contrib.netopt.custom_convolution_ops.Multibit.multiFunc
  name: multiFunc
  signature: multiFunc(arg1)
  parameters:
  - name: arg1
    isRequired: true
- uid: cntk.contrib.netopt.custom_convolution_ops.Multibit.serialize
  name: serialize
  signature: serialize()
