### YamlMime:PythonPackage
uid: cntk.ops.sequence
name: sequence
fullName: cntk.ops.sequence
summary: CNTK operators that are specialized in sequences.  Calling these operators
  creates nodes in the CNTK computational graph.
type: import
functions:
- uid: cntk.ops.sequence.broadcast_as
  name: broadcast_as
  summary: 'Creates a sequence out of a non-sequence by endowing the `operand`

    with dynamic axes of the same type as the `broadcast_as_operand`

    and broadcasting the value of the `operand` along those dynamic axes.'
  signature: broadcast_as(operand, broadcast_as_operand, name='')
  parameters:
  - name: operand
    description: the symbolic tensor whose value will be broadcast
    isRequired: true
  - name: broadcast_as_operand
    description: 'the symbolic tensor whose dynamic axes will

      be used to broadcast the operand'
    isRequired: true
  - name: name
    description: the name of the node in the network
    isRequired: true
    types:
    - <xref:str>
  return:
    description: <xref:cntk.ops.functions.Function>
  examples:
  - "\n```\n\n>>> x = C.sequence.input_variable(shape=(3,2))\n>>> t = C.sequence.last(x)\n\
    >>> b = C.sequence.is_first(x)\n>>> y = C.sequence.broadcast_as(t, b)\n>>> # create\
    \ one sequence of 4 tensors each with shape (3,2)\n>>> x0 = np.reshape(np.arange(24.0,dtype=np.float32),(1,4,3,2))\n\
    >>> y.eval({x:x0})\n[array([[[ 18.,  19.],\n         [ 20.,  21.],\n         [\
    \ 22.,  23.]],\n\n        [[ 18.,  19.],\n         [ 20.,  21.],\n         [ 22.,\
    \  23.]],\n\n        [[ 18.,  19.],\n         [ 20.,  21.],\n         [ 22., \
    \ 23.]],\n\n        [[ 18.,  19.],\n         [ 20.,  21.],\n         [ 22.,  23.]]],\
    \ dtype=float32)]\n```\n"
- uid: cntk.ops.sequence.delay
  name: delay
  summary: 'This function combines <xref:cntk.ops.sequence.past_value> and <xref:cntk.ops.sequence.future_value>
    into a single function.

    This is useful when the time_step is computed and can be positive, negative, or
    0.'
  signature: delay(x, initial_state=None, time_step=1, name='')
  parameters:
  - name: x
    description: the tensor (or its name) from which the past value is obtained
    isRequired: true
  - name: initial_state
    description: tensor or scalar representing the initial value to be used when the
      input tensor is shifted in time.
    defaultValue: None
  - name: time_step
    description: the number of time steps to look into the past, where negative values
      mean to look into the future, and 0 means a no-op (default 1).
    defaultValue: '1'
    types:
    - <xref:int>
  - name: name
    description: the name of the Function instance in the network
    isRequired: true
    types:
    - <xref:str>, <xref:optional>
- uid: cntk.ops.sequence.first
  name: first
  summary: Returns the first element of its symbolic input sequence `seq`
  signature: first(seq, name='')
  parameters:
  - name: seq
    description: the symbolic tensor denoting a sequence
    isRequired: true
  - name: name
    description: the name of the node in the network
    isRequired: true
    types:
    - <xref:str>
  return:
    description: <xref:cntk.ops.functions.Function>
  examples:
  - "\n```\n\n>>> x = C.sequence.input_variable(shape=(3,2))\n>>> y = C.sequence.first(x)\n\
    >>> # create one sequence of 4 tensors each with shape (3,2)\n>>> x0 = np.reshape(np.arange(24.0,dtype=np.float32),(1,4,3,2))\n\
    >>> y.eval({x:x0})\narray([[[ 0.,  1.],\n         [ 2.,  3.],\n         [ 4.,\
    \  5.]]], dtype=float32)\n```\n"
- uid: cntk.ops.sequence.future_value
  name: future_value
  summary: 'This function returns the future value w.r.t. `x`. It is most often used
    when

    creating RNNs. The resulting tensor has the same shape as the input but is

    the next logical sample. The `time_step` parameter is the number of steps

    to look into the future and is 1 by default. If there is no future value (i.e.

    the current sample is the last one in the tensor) then the `initial_state`

    value is returned.

    The initial state can be a constant (scalar or tensor), a learnable tensor

    or input data (which has a batch dimension, as needed for sequence-to-sequence
    models).'
  signature: future_value(x, initial_state=None, time_step=1, name='')
  parameters:
  - name: x
    description: the tensor (or its name) from which the future value is obtained.
    isRequired: true
  - name: initial_state
    description: tensor or scalar representing the initial value to be used when the
      input tensor is shifted in time.
    isRequired: true
  - name: time_step
    description: the number of time steps to look into the future (default 1)
    isRequired: true
    types:
    - <xref:int>
  - name: name
    description: the name of the Function instance in the network
    isRequired: true
    types:
    - <xref:str>, <xref:optional>
  return:
    description: <xref:cntk.ops.functions.Function>
  examples:
  - "\n```\n\n>>> x = C.sequence.input_variable(shape=(3,2))\n>>> # Create one sequence\
    \ with 4 tensors of shape (3, 2)\n>>> x0 = np.reshape(np.arange(24,dtype=np.float32),(1,4,3,2))\n\
    >>> y = C.sequence.future_value(x) # using initial state of 0 by default\n>>>\
    \ y.eval({x:x0})\n[array([[[  6.,   7.],\n         [  8.,   9.],\n         [ 10.,\
    \  11.]],\n\n        [[ 12.,  13.],\n         [ 14.,  15.],\n         [ 16., \
    \ 17.]],\n\n        [[ 18.,  19.],\n         [ 20.,  21.],\n         [ 22.,  23.]],\n\
    \n        [[  0.,   0.],\n         [  0.,   0.],\n         [  0.,   0.]]], dtype=float32)]\n\
    ```\n"
- uid: cntk.ops.sequence.gather
  name: gather
  summary: 'Takes two sequences of the same length and returns a new sequence whose

    elements are those elements of sequence `seq` whose corresponding element

    in `condition` is True, preserving the ordering of `seq`.

    This operation is also known as stream compaction, or copy_if.'
  signature: gather(seq, condition, new_sequence_axis_typeinfo=None, name='')
  parameters:
  - name: seq
    description: the symbolic sequence from which elements will be selected
    isRequired: true
  - name: condition
    description: 'the symbolic sequence of booleans which indicate which

      elements should be selected'
    isRequired: true
  - name: new_sequence_axis_typeinfo
    description: 'tuple of integers indicating

      the scaling and additive factors for the length of the new sequence axis

      w.r.t. the operand sequence. This is used to determine the sequence axis

      to be used for the output of the gather operation. If this argument is left

      unspecified, a new independent sequence axis is created.'
    isRequired: true
  - name: name
    description: the name of the node in the network
    isRequired: true
    types:
    - <xref:str>
  return:
    description: <xref:cntk.ops.functions.Function>
  examples:
  - "\n```\n\n>>> x = C.sequence.input_variable(shape=(3,2))\n>>> z = C.greater(C.reduce_sum(x),60)\n\
    >>> y = C.sequence.gather(x,z)\n>>> # create one sequence of 4 tensors each with\
    \ shape (3,2)\n>>> x0 = np.reshape(np.arange(24.0,dtype=np.float32),(1,4,3,2))\n\
    >>> y.eval({x:x0})\n[array([[[ 12.,  13.],\n         [ 14.,  15.],\n         [\
    \ 16.,  17.]],\n\n        [[ 18.,  19.],\n         [ 20.,  21.],\n         [ 22.,\
    \  23.]]], dtype=float32)]\n```\n"
- uid: cntk.ops.sequence.input
  name: input
  summary: 'DEPRECATED.

    It creates an input in the network: a place where data,

    such as features and labels, should be provided.'
  signature: input(shape, dtype=<cntk.default_options.default_override_or object>,
    needs_gradient=False, is_sparse=False, sequence_axis=Axis('defaultDynamicAxis'),
    name='')
  parameters:
  - name: shape
    description: the shape of the input tensor
    isRequired: true
    types:
    - <xref:tuple>
    - <xref:int>
  - name: dtype
    description: data type. Default is np.float32.
    isRequired: true
    types:
    - <xref:np.float32>
    - <xref:np.float64>
    - <xref:np.float16>
  - name: needs_gradients
    description: whether to back-propagates to it or not. False by default.
    isRequired: true
    types:
    - <xref:bool>, <xref:optional>
  - name: is_sparse
    description: whether the variable is sparse (*False* by default)
    isRequired: true
    types:
    - <xref:bool>, <xref:optional>
  - name: sequence_axis
    description: a dynamic axis (e.g., default_dynamic_axis())
    isRequired: true
    types:
    - <xref:cntk.axis.Axis>
  - name: name
    description: the name of the Function instance in the network
    isRequired: true
    types:
    - <xref:str>, <xref:optional>
  return:
    description: <xref:cntk.variables.Variable>
- uid: cntk.ops.sequence.input_variable
  name: input_variable
  summary: 'It creates an input in the network: a place where data,

    such as features and labels, should be provided.'
  signature: input_variable(shape, dtype=np.float32, needs_gradient=False, is_sparse=False,
    sequence_axis=Axis.default_dynamic_axis(), name='')
  parameters:
  - name: shape
    description: the shape of the input tensor
    isRequired: true
    types:
    - <xref:tuple>
    - <xref:int>
  - name: dtype
    description: data type. Default is np.float32.
    isRequired: true
    types:
    - <xref:np.float32>
    - <xref:np.float64>
    - <xref:np.float16>
  - name: needs_gradients
    description: whether to back-propagates to it or not. False by default.
    isRequired: true
    types:
    - <xref:bool>, <xref:optional>
  - name: is_sparse
    description: whether the variable is sparse (*False* by default)
    isRequired: true
    types:
    - <xref:bool>, <xref:optional>
  - name: sequence_axis
    description: a dynamic axis (e.g., default_dynamic_axis())
    isRequired: true
    types:
    - <xref:cntk.axis.Axis>
  - name: name
    description: the name of the Function instance in the network
    isRequired: true
    types:
    - <xref:str>, <xref:optional>
  return:
    description: <xref:cntk.variables.Variable>
- uid: cntk.ops.sequence.is_first
  name: is_first
  summary: 'Returns a symbolic sequence of booleans with the same length as `seq`.
    The

    first element of the sequence is 1 and all others are 0.'
  signature: is_first(seq, name='')
  parameters:
  - name: seq
    description: the symbolic tensor denoting a sequence
    isRequired: true
  - name: name
    description: the name of the node in the network
    isRequired: true
    types:
    - <xref:str>
  return:
    description: <xref:cntk.ops.functions.Function>
  examples:
  - '

    ```


    >>> x = C.sequence.input_variable(shape=(3,2))

    >>> y = C.sequence.is_first(x)

    >>> # create one sequence of 4 tensors each with shape (3,2)

    >>> x0 = np.reshape(np.arange(24.0,dtype=np.float32),(1,4,3,2))

    >>> y.eval({x:x0})

    [array([ 1.,  0.,  0.,  0.], dtype=float32)]

    ```

    '
- uid: cntk.ops.sequence.is_last
  name: is_last
  summary: 'Returns a symbolic sequence of booleans with the same length as `seq`.
    The

    last element of the sequence is 1 and all others are 0.'
  signature: is_last(seq, name='')
  parameters:
  - name: seq
    description: the symbolic tensor denoting a sequence
    isRequired: true
  - name: name
    description: the name of the node in the network
    isRequired: true
    types:
    - <xref:str>
  return:
    description: <xref:cntk.ops.functions.Function>
  examples:
  - '

    ```


    >>> x = C.sequence.input_variable(shape=(3,2))

    >>> y = C.sequence.is_last(x)

    >>> # create one sequence of 4 tensors each with shape (3,2)

    >>> x0 = np.reshape(np.arange(24.0,dtype=np.float32),(1,4,3,2))

    >>> y.eval({x:x0})

    [array([ 0.,  0.,  0.,  1.], dtype=float32)]

    ```

    '
- uid: cntk.ops.sequence.last
  name: last
  summary: Returns the last element of its symbolic input sequence `seq`
  signature: last(seq, name='')
  parameters:
  - name: seq
    description: the symbolic tensor denoting a sequence
    isRequired: true
  - name: name
    description: the name of the node in the network
    isRequired: true
    types:
    - <xref:str>
  return:
    description: <xref:cntk.ops.functions.Function>
  examples:
  - "\n```\n\n>>> x = C.sequence.input_variable(shape=(3,2))\n>>> y = C.sequence.last(x)\n\
    >>> # create one sequence of 4 tensors each with shape (3,2)\n>>> x0 = np.reshape(np.arange(24.0,dtype=np.float32),(1,4,3,2))\n\
    >>> y.eval({x:x0})\narray([[[ 18.,  19.],\n         [ 20.,  21.],\n         [\
    \ 22.,  23.]]], dtype=float32)\n```\n"
- uid: cntk.ops.sequence.past_value
  name: past_value
  summary: 'This function returns the past value w.r.t. `x`. It is most often used
    when

    creating RNNs. The resulting tensor has the same shape as the input but is

    the previous logical sample. The `time_step` parameter is the number of steps

    to look into the past and is 1 by default. If there is no past value (i.e.

    the current sample is the first one in the tensor)  then the `initial_state`

    value is returned.

    The initial state can be a constant (scalar or tensor), a learnable tensor

    or input data (which has a batch dimension, as needed for sequence-to-sequence
    models).'
  signature: past_value(x, initial_state=None, time_step=1, name='')
  parameters:
  - name: x
    description: the tensor (or its name) from which the past value is obtained
    isRequired: true
  - name: initial_state
    description: tensor or scalar representing the initial value to be used when the
      input tensor is shifted in time.
    isRequired: true
  - name: time_step
    description: the number of time steps to look into the past (default 1)
    isRequired: true
    types:
    - <xref:int>
  - name: name
    description: the name of the Function instance in the network
    isRequired: true
    types:
    - <xref:str>, <xref:optional>
  return:
    description: <xref:cntk.ops.functions.Function>
  examples:
  - "\n```\n\n>>> # create example input: one sequence with 4 tensors of shape (3,\
    \ 2)\n>>> from cntk.layers.typing import Tensor, Sequence\n>>> x = C.sequence.input_variable((3,2))\n\
    >>> x0 = np.reshape(np.arange(24,dtype=np.float32),(1,4,3,2))\n>>> x0\narray([[[[\
    \  0.,   1.],\n         [  2.,   3.],\n         [  4.,   5.]],\n\n        [[ \
    \ 6.,   7.],\n         [  8.,   9.],\n         [ 10.,  11.]],\n\n        [[ 12.,\
    \  13.],\n         [ 14.,  15.],\n         [ 16.,  17.]],\n\n        [[ 18., \
    \ 19.],\n         [ 20.,  21.],\n         [ 22.,  23.]]]], dtype=float32)\n```\n\
    \n\n```\n\n>>> # this demonstrates how past_value shifts the sequence by one,\
    \ padding with initial_state\n>>> y = C.sequence.past_value(x) # initial_state\
    \ is 0 by default\n>>> y.eval({x:x0})\n[array([[[  0.,   0.],\n         [  0.,\
    \   0.],\n         [  0.,   0.]],\n\n        [[  0.,   1.],\n         [  2., \
    \  3.],\n         [  4.,   5.]],\n\n        [[  6.,   7.],\n         [  8.,  \
    \ 9.],\n         [ 10.,  11.]],\n\n        [[ 12.,  13.],\n         [ 14.,  15.],\n\
    \         [ 16.,  17.]]], dtype=float32)]\n```\n\n\n```\n\n>>> # here, we pass\
    \ a the initial_state as input data (e.g. sequence-to-sequence)\n>>> s = C.input_variable((3,2))\
    \  # not a sequence, e.g. a final encoder hidden state\n>>> s0 = np.reshape(np.arange(6,dtype=np.float32)/2,(1,3,2))\n\
    >>> s0\narray([[[ 0. ,  0.5],\n        [ 1. ,  1.5],\n        [ 2. ,  2.5]]],\
    \ dtype=float32)\n>>> y = C.sequence.past_value(x, initial_state=s)\n>>> y.eval({x:x0,\
    \ s:s0}) # same as the previous example except for the first time step\n[array([[[\
    \  0. ,   0.5],\n         [  1. ,   1.5],\n         [  2. ,   2.5]],\n\n     \
    \   [[  0. ,   1. ],\n         [  2. ,   3. ],\n         [  4. ,   5. ]],\n\n\
    \        [[  6. ,   7. ],\n         [  8. ,   9. ],\n         [ 10. ,  11. ]],\n\
    \n        [[ 12. ,  13. ],\n         [ 14. ,  15. ],\n         [ 16. ,  17. ]]],\
    \ dtype=float32)]\n```\n"
- uid: cntk.ops.sequence.reduce_max
  name: reduce_max
  summary: Computes the max of the input sequence's elements across the sequence axis.
  signature: reduce_max(seq, name='')
  parameters:
  - name: seq
    description: sequence input tensor
    isRequired: true
  - name: name
    description: the name of the Function instance in the network
    isRequired: true
    types:
    - <xref:str>, <xref:optional>
  return:
    description: <xref:cntk.ops.functions.Function>
- uid: cntk.ops.sequence.reduce_sum
  name: reduce_sum
  summary: Computes the sum of the input sequence's elements across the sequence axis.
  signature: reduce_sum(seq, name='')
  parameters:
  - name: seq
    description: sequence input tensor
    isRequired: true
  - name: name
    description: the name of the Function instance in the network
    isRequired: true
    types:
    - <xref:str>, <xref:optional>
  return:
    description: <xref:cntk.ops.functions.Function>
  examples:
  - "\n```\n\n>>> x = C.sequence.input_variable(shape=(3,2))\n>>> # create one sequence\
    \ of 4 tensors each with shape (3,2)\n>>> x0 = np.reshape(np.arange(24.0,dtype=np.float32),(1,4,3,2))\n\
    >>> y = C.sequence.reduce_sum(x)\n>>> y.eval({x:x0})\narray([[[ 36.,  40.],\n\
    \         [ 44.,  48.],\n         [ 52.,  56.]]], dtype=float32)\n```\n"
- uid: cntk.ops.sequence.scatter
  name: scatter
  summary: 'Performs the inverse of gather. The sequence `seq` must have as many

    elements as the number of True values in the sequence `condition`.

    It will return a sequence whose length is the same as the `condition`

    sequence with zeroes everywhere except for the locations where `condition`

    evaluates to True in which case it will copy the elements from `seq`

    preserving their order.'
  signature: scatter(seq, condition, new_sequence_axis_typeinfo=None, name='')
  parameters:
  - name: seq
    description: 'the symbolic sequence from which elements will be copied in the

      output'
    isRequired: true
  - name: condition
    description: 'the symbolic sequence which denotes the locations where

      elements should be copied'
    isRequired: true
  - name: new_sequence_axis_typeinfo
    description: 'tuple of integers indicating

      the scaling and additive factors for the length of the new sequence axis

      w.r.t. the condition sequence. This is used to determine the sequence axis

      to be used for the output of the gather operation. If this argument is left

      unspecified a new independent sequence axis is created.'
    isRequired: true
  - name: name
    description: the name of the node in the network
    isRequired: true
    types:
    - <xref:str>
  return:
    description: <xref:cntk.ops.functions.Function>
  examples:
  - "\n```\n\n>>> x = C.sequence.input_variable(shape=(3,2))\n>>> t = C.sequence.last(x)\n\
    >>> b = C.sequence.is_first(x)\n>>> y = C.sequence.scatter(t, b)\n>>> # create\
    \ one sequence of 4 tensors each with shape (3,2)\n>>> x0 = np.reshape(np.arange(24.0,dtype=np.float32),(1,4,3,2))\n\
    >>> y.eval({x:x0})\n[array([[[ 18.,  19.],\n         [ 20.,  21.],\n         [\
    \ 22.,  23.]],\n\n        [[  0.,   0.],\n         [  0.,   0.],\n         [ \
    \ 0.,   0.]],\n\n        [[  0.,   0.],\n         [  0.,   0.],\n         [  0.,\
    \   0.]],\n\n        [[  0.,   0.],\n         [  0.,   0.],\n         [  0., \
    \  0.]]], dtype=float32)]\n```\n"
- uid: cntk.ops.sequence.slice
  name: slice
  summary: Slice the input sequence.
  signature: slice(seq, begin_index, end_index, name='')
  return:
    description: <xref:cntk.ops.functions.Function>
  seeAlsoContent: '  Indexing in NumPy: [https://docs.scipy.org/doc/numpy/reference/arrays.indexing.html](https://docs.scipy.org/doc/numpy/reference/arrays.indexing.html)

    '
- uid: cntk.ops.sequence.softmax
  name: softmax
  summary: Computes the softmax of the input across the sequence axis.
  signature: softmax(seq, name='')
  parameters:
  - name: seq
    description: sequence input tensor
    isRequired: true
  - name: name
    description: the name of the Function instance in the network
    isRequired: true
    types:
    - <xref:str>, <xref:optional>
  return:
    description: <xref:cntk.ops.functions.Function>
- uid: cntk.ops.sequence.unpack
  name: unpack
  summary: 'This function unpacks the specified sequence operand ''x'' along the most

    significant static axis [-1] and pads any gaps with the specified ''padding_value''.

    If the ''no_mask_output'' argument is False, the returned Function has 2 outputs;

    viz. the unpacked non-sequence data and a mask denoting the gaps in the unpacked
    output

    due to differences across lengths of the sequences in the operand.'
  signature: unpack(x, padding_value, no_mask_output=False, name='')
  parameters:
  - name: x
    description: the sequence tensor (or its name) which is unpacked
    isRequired: true
  - name: padding_value
    description: The value to pad gaps in the unpacked tensor with.
    isRequired: true
    types:
    - <xref:np.float32>
    - <xref:np.float64>
    - <xref:np.float16>
  - name: no_mask_output
    description: 'whether the Function has a mask tensor output denoting the

      gaps in the unpacked output due to differences across lengths of the sequences
      in the operand.'
    isRequired: true
    types:
    - <xref:bool>, <xref:optional>
  - name: name
    description: the name of the Function instance in the network
    isRequired: true
    types:
    - <xref:str>, <xref:optional>
  return:
    description: <xref:cntk.ops.functions.Function>
- uid: cntk.ops.sequence.where
  name: where
  summary: 'Given a symbolic sequence `condition` of boolean-like (1/0) values, it
    will return

    a new sequence containing the indices for which the values were true.

    If `condition` has a value other than 0 or 1, it will denote a repeat factor.

    If a repeat factor is fractional, it will round up but deduct the overshoot from
    the

    next repeat factor.'
  signature: where(condition, name='')
  parameters:
  - name: condition
    description: sequence of 0 or 1 values for filtering, or other positive values
      for repetition (also fractional)
    isRequired: true
  - name: name
    description: the name of the node in the network
    isRequired: true
    types:
    - <xref:str>
  return:
    description: <xref:cntk.ops.functions.Function>
  examples:
  - "\n```\n\n>>> x = C.sequence.input_variable(shape=(3,2))\n>>> z = C.greater(C.reduce_sum(x),\
    \ 60)\n>>> # create one sequence of 4 tensors each with shape (3,2)\n>>> x0 =\
    \ np.reshape(np.arange(24.0, dtype=np.float32), (1,4,3,2))\n>>> z.eval({x:x0})\n\
    [array([ 0.,  0.,  1.,  1.], dtype=float32)]\n>>> y = C.sequence.where(z)\n>>>\
    \ y.eval({x:x0})\n[array([ 2.,  3.], dtype=float32)]\n```\n\n\n```\n\n>>> # repeat\
    \ frame[1] twice, frame[3] three times, and frame[4] twice\n>>> C.sequence.where(C.sequence.input_variable(1)).eval([[[1],\
    \ [2], [1], [3], [2]]])\n[array([ 0.,  1.,  1.,  2.,  3.,  3.,  3.,  4.,  4.],\
    \ dtype=float32)]\n>>> # note that the above are the indices that are passed to\n\
    ```\n\n\n```\n\n>>> # repeat frames with a fractional factor\n>>> C.sequence.where(C.sequence.input_variable(1)).eval([[[1.2]]*10])\n\
    [array([ 0.,  0.,  1.,  2.,  3.,  4.,  5.,  5.,  6.,  7.,  8.,  9.],\n    dtype=float32)]\n\
    >>> # as a result, a 1.2 times stretch is realized by duplicating frame[0] and\
    \ frame[5]\n```\n"
