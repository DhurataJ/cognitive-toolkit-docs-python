### YamlMime:PythonClass
uid: cntk.cntk_py.DistributedLearner
name: DistributedLearner
fullName: cntk.cntk_py.DistributedLearner
module: cntk.cntk_py
inheritances:
- cntk.cntk_py.Learner
constructor:
  syntax: DistributedLearner(*args, **kwargs)
methods:
- uid: cntk.cntk_py.DistributedLearner.do_aggregate_metrics_if_needed
  name: do_aggregate_metrics_if_needed
  signature: do_aggregate_metrics_if_needed(arg2, arg3)
  parameters:
  - name: arg2
    isRequired: true
  - name: arg3
    isRequired: true
- uid: cntk.cntk_py.DistributedLearner.get_communicator
  name: get_communicator
  signature: get_communicator()
- uid: cntk.cntk_py.DistributedLearner.is_metric_aggregator
  name: is_metric_aggregator
  signature: is_metric_aggregator()
- uid: cntk.cntk_py.DistributedLearner.learning_rate
  name: learning_rate
  signature: learning_rate()
- uid: cntk.cntk_py.DistributedLearner.minibatch_size_scale_factor
  name: minibatch_size_scale_factor
  signature: minibatch_size_scale_factor()
- uid: cntk.cntk_py.DistributedLearner.parallelization_after
  name: parallelization_after
  signature: parallelization_after()
- uid: cntk.cntk_py.DistributedLearner.reset_learning_rate
  name: reset_learning_rate
  signature: reset_learning_rate(learningRateSchedule)
  parameters:
  - name: learningRateSchedule
    isRequired: true
- uid: cntk.cntk_py.DistributedLearner.reset_smoothed_gradients
  name: reset_smoothed_gradients
  signature: reset_smoothed_gradients()
- uid: cntk.cntk_py.DistributedLearner.set_as_metric_aggregator
  name: set_as_metric_aggregator
  signature: set_as_metric_aggregator()
