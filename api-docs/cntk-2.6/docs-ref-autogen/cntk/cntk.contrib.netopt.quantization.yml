### YamlMime:PythonModule
uid: cntk.contrib.netopt.quantization
name: quantization
fullName: cntk.contrib.netopt.quantization
functions:
- uid: cntk.contrib.netopt.quantization.binarize_convolution
  name: binarize_convolution
  summary: 'Replace Convolution layers in the model to Halide implementations of

    binarized convolutions.'
  signature: binarize_convolution(model, train_function, filter_function=None)
  parameters:
  - name: model
    description: model that needs convolutions to be optimized.
  - name: train_function
    description: 'this is a two step process. First, convert the model

      to binary convolution and next, transform it to the

      Halide implementation. Between above steps,

      we need to train the model to get the best results.

      train_function provides this functionality.'
  - name: filter_function
    description: filter layers in the model to apply the binarization.
    defaultValue: None
  return:
    description: A model with Halid operators.
- uid: cntk.contrib.netopt.quantization.binary_convolution
  name: binary_convolution
  summary: Creates a binary convolution function based on the input parameters.
  signature: binary_convolution(filter_shape, num_filters=1, channels=1, init=<cntk.cntk_py.Dictionary;
    proxy of <Swig Object of type 'CNTK::ImageTransform *'> >, pad=False, strides=1,
    name='BinaryConvolution')
  parameters:
  - name: filter_shape
    description: shape of the filter
  - name: num_filters
    description: number of filters to use
    defaultValue: '1'
  - name: init
    description: initialization function for the filter
    defaultValue: '1'
  - name: pad
    description: padding enabled or not for the filter
    defaultValue: <cntk.cntk_py.Dictionary; proxy of <Swig Object of type 'CNTK::ImageTransform
      *' at 0x00000213AD2A7D80> >
  - name: strides
    description: overlap for this filter
    defaultValue: 'False'
  - name: name
    description: name given to the binary convolution.
    defaultValue: '1'
  - name: name
    defaultValue: BinaryConvolution
  return:
    description: a function for performing binary convolution
- uid: cntk.contrib.netopt.quantization.convert_to_binary_convolution
  name: convert_to_binary_convolution
  summary: 'Replace convolution functions in the model with binary convolutions.

    The function replaces the convolution function inside the

    cntk.layers.convolution block without changing the block structure.

    The output model has python version of the binarized convolutions.'
  signature: convert_to_binary_convolution(model, filter_function=None)
  parameters:
  - name: model
    description: model that needs to be binarized.
  - name: filter_function
    description: filter layers in the model to apply the binarization
    defaultValue: None
  return:
    description: a model with convolution functions replaced by binary convolutions.
- uid: cntk.contrib.netopt.quantization.convert_to_native_binary_convolution
  name: convert_to_native_binary_convolution
  summary: 'Clones a binary convolution network, sharing the original parameters

    but substitutes the python ''BinaryConvolution'' Function instances

    used during training with faster C++ NativeBinaryConvolveFunction

    instances that uses optimized binary convolution implementations

    generated using the Halide framework'
  signature: convert_to_native_binary_convolution(model)
  parameters:
  - name: model
    description: model that needs convolutions to be substituted.
  return:
    description: A model with Halid operators.
