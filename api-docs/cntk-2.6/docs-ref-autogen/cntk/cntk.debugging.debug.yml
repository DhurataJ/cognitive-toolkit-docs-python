### YamlMime:PythonModule
uid: cntk.debugging.debug
name: debug
fullName: cntk.debugging.debug
summary: "In order to debug a graph one simply needs to wrap the root node as follows::\n\
  \n\n    # ... setting up the model in z\n    from cntk.debugging import debug_model\n\
  \    z = debug_model(z)\n\n\nThen, when ``z`` is evaluated or trained (i.e. when\
  \ either\n<xref:cntk.ops.functions.Function.forward> or\n<xref:cntk.ops.functions.Function.backward>\
  \ is called, you will see the\nfollowing command-line interface::\n\n\n    ===================================\
  \ forward  ===================================\n    Parameter node with uid='Parameter28'\
  \ shape=[](2,)\n    [CNTK forward] >>> help\n        Commands:\n        n - execute\
  \ the next node\n        n <number> - execute the next <number> nodes\n\n\n    \
  \    u f - execute until forward pass (like 'n' when already in forward pass)\n\
  \        u b - execute until backward pass (like 'n' when already in backward pass)\n\
  \        u name - execute until a node with that name is hit\n        u <lambda>\
  \ - execute until the lambda expression is True. Examples:\n                   \
  \  Until a Times node is hit:\n                         lambda arg, node: node.op_name\
  \ == 'Times'\n                     Until a node is hit that has 3 dimensions:\n\
  \                         lambda arg, node: len(node.shape) == 3\n             \
  \        Until the variance of the input exceeds 1 (np = numpy):\n             \
  \            lambda arg, node: np.var(arg) > 1\n\n\n        c - execute until end\n\
  \        p - print input (forward) or root gradients (backward)\n        d - drop\
  \ into a pdb shell\n        q - quit\n\n\n    [CNTK backward] >>> n\n\n\n    Times\
  \ node with uid='Times29' shape=[*,*](2,)\n    [CNTK forward] >>> n\n    ===================================\
  \ backward ===================================\n    Times node with uid='Times29'\
  \ shape=[*,*](2,)\n    [CNTK backward] >>> p\n    State: None\n    Root gradients:\n\
  \    [[[-0.79412955  0.79412955]]\n     [[-0.79412955  0.79412955]]\n     [[ 0.20587046\
  \ -0.20587045]]\n     [[ 0.20587046 -0.20587045]]\n     [[ 0.20587046 -0.20587045]]\n\
  \     [[ 0.20587046 -0.20587045]]\n     [[-0.79412955  0.79412955]]\n     [[ 0.20587046\
  \ -0.20587045]]\n     [[ 0.20587039 -0.20587039]]\n     [[-0.79412961  0.79412961]]]\n\
  \n\nAt every stop the following information is given:\n * Forward or backward pass\n\
  \ * Node type (e.g. 'Times')\n * Name if given, otherwise it is omitted\n * uid,\
  \ which is a unique reference within the graph\n * shape having the format [dynamic\
  \ axis](static axes). E.g. ``[*,*](2,)``\n   means that the node's output has two\
  \ dynamic axes (batch and sequence) and\n   one static axis (2 dimensions)"
functions:
- uid: cntk.debugging.debug.debug_model
  name: debug_model
  summary: 'Returns a cloned model that has debug nodes inserted everywhere. When
    the

    graph is evaluated or trained, those nodes will allow to inspect the graph.'
  signature: debug_model(model, in_stream=sys.stdin, out_stream=sys.stdout, exit_func=sys.exit)
  parameters:
  - name: model
    description: root node until which the nodes are to be debugged
    isRequired: true
    types:
    - <xref:root node>
  - name: in_stream
    description: '*readline()*

      will be called on it to obtain user input'
    defaultValue: <_io.TextIOWrapper name='<stdin>' mode='r' encoding='cp1252'>
    types:
    - <xref:object behaving like sys.stdin>, <xref:default stdin>
  - name: out_stream
    description: '*write()*

      and *flush()* will be called on it to output debug info to the user'
    isRequired: true
    types:
    - <xref:object behaving like sys.stdout>, <xref:default stdout>
  - name: exit_func
    description: 'callable that takes an exit code and is called,

      when the user exits the debugging process'
    defaultValue: <built-in function exit>
    types:
    - <xref:callable>, <xref:default sys.exit>
  return:
    description: a clone of the model that has debugging enabled
- uid: cntk.debugging.debug.save_as_legacy_model
  name: save_as_legacy_model
  summary: 'Save the network of `root_op` in `filename`.

    For debugging purposes only, very likely to be deprecated in the future.'
  signature: save_as_legacy_model(root_op, filename)
  parameters:
  - name: root_op
    description: op of the graph to save
    isRequired: true
    types:
    - <xref:cntk.ops.functions.Function>
  - name: filename
    description: filename to store the model in.
    isRequired: true
    types:
    - <xref:str>
- uid: cntk.debugging.debug.set_checked_mode
  name: set_checked_mode
  summary: "Checked mode enables additional runtime verification such as:\n   * Tracking\
    \ NaN occurrences in sequence gaps. \n\n   * Function graph verification after\
    \ binding of free static axes to actual values at runtime \n\nEnabling checked\
    \ mode incurs additional runtime costs and is meant to be used as a debugging\
    \ aid."
  signature: set_checked_mode(enable)
  parameters:
  - name: enable
    description: whether to enable checked mode (with performance impact)
    isRequired: true
    types:
    - <xref:bool>
- uid: cntk.debugging.debug.set_computation_network_trace_level
  name: set_computation_network_trace_level
  summary: "Set trace level to the computation network. Currently supported values:\n\
    \n   0\n      turn off trace\n\n   1\n      output nodes' dimensions and some\
    \ other static info\n\n   1000\n      output each node's abs sum of elements in\
    \ its value matrix for every forward/backward\n\n   1000000\n      output each\
    \ node's full matrix for every forward/backward"
  signature: set_computation_network_trace_level(level)
  parameters:
  - name: level
    description: trace level
    isRequired: true
    types:
    - <xref:int>
- uid: cntk.debugging.debug.set_node_timing
  name: set_node_timing
  summary: 'Node-timing records per-node average execution time per-minibatch.

    Enabling checked mode incurs a little runtime costs and is meant to be used as
    a debugging aid.'
  signature: set_node_timing(enable)
  parameters:
  - name: enable
    description: whether to enable per-node timing
    isRequired: true
    types:
    - <xref:bool>
