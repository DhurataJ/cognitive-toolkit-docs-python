### YamlMime:PythonModule
uid: cntk.device
name: device
fullName: cntk.device
summary: Utilities to specify device on which CNTK computation can be executed.
functions:
- uid: cntk.device.all_devices
  name: all_devices
  summary: Returns a device descriptor list with all the available devices
  signature: all_devices()
  return:
    description: all device descriptors
    types:
    - <xref:cntk.device.DeviceDescriptor> list
- uid: cntk.device.cpu
  name: cpu
  summary: Returns CPU device descriptor
  signature: cpu()
  return:
    description: CPU device descriptor
    types:
    - <xref:cntk.device.DeviceDescriptor>
- uid: cntk.device.get_gpu_properties
  name: get_gpu_properties
  summary: 'Retrieves and returns additional properties (total memory, number of CUDA

    cores, etc.) for the specified GPU device. This method will raise an

    exception if a CPU device is specified as an argument.'
  signature: get_gpu_properties(device)
  parameters:
  - name: device
    description: 'a GPU device

      descriptor.'
    isRequired: true
- uid: cntk.device.gpu
  name: gpu
  summary: Returns GPU device descriptor
  signature: gpu(device_id)
  return:
    description: GPU device descriptor
    types:
    - <xref:cntk.device.DeviceDescriptor>
- uid: cntk.device.set_excluded_devices
  name: set_excluded_devices
  summary: 'Allows to specify a list of excluded devices that cannot be used as

    globally default (neither auto-selected nor explicitly specified by

    <xref:cntk.device.try_set_default_device>). For example, to avoid auto-selecting
    the

    CPU, invoke `set_excluded_devices([cpu()])`. However, after the default

    device has been selected and frozen (by a call to

    <xref:cntk.device.use_default_device>), invoking this methods has no effect, it

    becomes essentially a no-op.'
  signature: set_excluded_devices(excluded_devices)
  parameters:
  - name: excluded_devices
    description: 'a

      list of device descriptors to exclude.'
    isRequired: true
    types:
    - list of <xref:cntk.device.DeviceDescriptor>
- uid: cntk.device.try_set_default_device
  name: try_set_default_device
  summary: "Tries to set the specified device as the globally default, optionally\n\
    acquiring an exclusive (cooperative) lock on the device (only a GPU device\ncan\
    \ be locked).\n\nThe default device can only be changed if it has not yet been\
    \ frozen by\nbeing implicitly used in any previous CNTK operation.\n\nCNTK uses\
    \ cooperative locking for the device access, whereby only a single\nprocess can\
    \ acquire a device lock. This locking mechanism allows CNTK\nprocesses to avoid\
    \ device oversubscription only if they collectively\nchoose so. In other words,\
    \ the device locked by one CNTK process, can\nstill be accessed by another CNTK\
    \ process without acquiring any locks\n(i.e, the existing device lock can be ignored\
    \ by other CNTK processes).\nThis cooperative locking mechanism does not guarantee\
    \ any kind of\nexclusive access to the device. The proper way to ensure exclusivity\
    \  is\nto use tools provided by NVIDIA (nvidia smi).\n\nReturns: *False* if\n\
    \   * the specified device appears in the list of excluded devices; \n\n   * *acquire_device_lock*\
    \ is *True* and another process already holds a lock on the device; \n\n   * *acquire_device_lock*\
    \ is *True* and *new_default_device* corresponds to a CPU device (which cannot\
    \ be locked)."
  signature: try_set_default_device(new_default_device, acquire_device_lock=False)
  parameters:
  - name: new_default_device
    description: 'a

      descriptor of the device to be used as a globally default.'
    isRequired: true
    types:
    - <xref:cntk.device.DeviceDescriptor>
  - name: acquire_device_lock
    description: 'whether or not a lock

      should be acquired for the specified device.'
    defaultValue: 'False'
    types:
    - <xref:bool>, <xref:defaults to False>
- uid: cntk.device.use_default_device
  name: use_default_device
  summary: 'Freezes the default device of the current CNTK process disallowing further

    changes through calls to <xref:cntk.device.try_set_default_device>. This default

    device will used for all CNTK operations where a device needs to be

    specified and where none was explicitly provided. If no device has been

    specified with a call to <xref:cntk.device.try_set_default_device>, on the first

    invocation, this methods will auto-select one of the available (non-locked)

    devices as the default.'
  signature: use_default_device()
  return:
    description: 'descriptor of the globally

      default device'
    types:
    - <xref:cntk.device.DeviceDescriptor>
classes:
- cntk.device.DeviceDescriptor
enums:
- cntk.device.DeviceKind
