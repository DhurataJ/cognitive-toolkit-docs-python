### YamlMime:PythonModule
uid: cntk.internal.utils
name: utils
fullName: cntk.internal.utils
functions:
- uid: cntk.internal.utils.eval
  name: eval
  summary: 'It evaluates `op` on the data provided by the reader. This is useful

    mainly to explore the operators and for convenient unit testing.'
  signature: eval(op, arguments=None, precision=None, device=None, backward_pass=False,
    expected_backward=None)
  parameters:
  - name: op
    description: operation to evaluate
    isRequired: true
    types:
    - <xref:cntk.ops.functions.Function>
  - name: arguments
    description: "maps variables to their input data. The\ninterpretation depends\
      \ on the input type:\n\n   * *dict*: keys are input variable or names, and values\
      \ are the input data. \n\n   * any other type: if node has a unique input, `arguments`\
      \ is mapped to this input. For nodes with more than one input, only *dict* is\
      \ allowed. \n\nIn both cases, every sample in the data will be interpreted\n\
      as a new sequence. To mark samples as continuations of the\nprevious sequence,\
      \ specify `arguments` as *tuple*: the\nfirst element will be used as `arguments`,\
      \ and the second one will\nbe used as a list of bools, denoting whether a sequence\
      \ is a new\none (*True*) or a continuation of the previous one (*False*).\n\
      Data should be either NumPy arrays or a\n<xref:cntk.io.MinibatchData> instance."
    defaultValue: None
  - name: seq_starts
    description: 'if None, every sequence is

      treated as a new sequence. Otherwise, it is interpreted as a list of

      Booleans that tell whether a sequence is a new sequence (*True*) or a

      continuation of the sequence in the same slot of the previous

      minibatch (*False*)'
    defaultValue: None
    types:
    - <xref:<xref:list of bools>>
    - <xref:None>
  - name: precision
    description: 'precision being ''float32'', ''float64'', ''float16'', or

      None, in which case it will be determined by inspecting the operator

      (costly)'
    defaultValue: None
    types:
    - <xref:str>
    - <xref:None>
  - name: device
    description: 'device

      this value should be put on'
    defaultValue: 'False'
    types:
    - <xref:cntk.device.DeviceDescriptor>, <xref:default None>
  - name: backward_pass
    description: whether a backward pass is performed
    defaultValue: None
    types:
    - <xref:bool>, <xref:optional>
  - name: expected_backward
    description: 'keys are variables for which to

      compute a backward ouptut. By default (None) all entries from

      ''arguments'' are used'
    isRequired: true
    types:
    - <xref:dict>
    - <xref:None>
  return:
    description: mapping of output variables to their values.
- uid: cntk.internal.utils.get_data_type
  name: get_data_type
  summary: 'Calculates the highest precision numpy data type of the provided parameters.

    If the parameter is a Function instance, it calculates it based on its

    inputs. placeholders are ignored in the type determination.'
  signature: get_data_type(*args)
  parameters:
  - name: args
    description: input
    isRequired: true
    types:
    - <xref:number>, <xref:list>, <xref:NumPy array>, <xref:cntk.variables.Variable,>
    - <xref:cntk.ops.functions.Function>
  return:
    description: np.float32, np.float64, np.float16 or None
- uid: cntk.internal.utils.get_python_function_arguments
  name: get_python_function_arguments
  summary: Helper to get the parameter names and annotations of a Python function.
  signature: get_python_function_arguments(f)
  parameters:
  - name: f
- uid: cntk.internal.utils.map_function_arguments
  name: map_function_arguments
  summary: 'Helper to determine the argument map for use with various call operations.

    Returns a dictionary from parameters to whatever arguments are passed.

    Accepted are both positional and keyword arguments.

    This mimics Python''s argument interpretation, except that keyword arguments are
    not optional.

    This does not require the arguments to be Variables or Functions. It is also called
    by train_minibatch() and @Signature.'
  signature: map_function_arguments(params, params_dict, *args, **kwargs)
  parameters:
  - name: params
  - name: params_dict
