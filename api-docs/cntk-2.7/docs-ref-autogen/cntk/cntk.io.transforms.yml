### YamlMime:PythonModule
uid: cntk.io.transforms
name: transforms
fullName: cntk.io.transforms
functions:
- uid: cntk.io.transforms.color
  name: color
  summary: Color transform that can be used to pass to *map_features* for data augmentation.
  signature: color(brightness_radius=0.0, contrast_radius=0.0, saturation_radius=0.0)
  parameters:
  - name: brightness_radius
    description: 'Radius for brightness change. Must be

      set within [0.0, 1.0]. For example, assume brightness_radius = 0.2, a random

      number *x* is uniformly drawn from [-0.2, 0.2], and every pixel''s value is

      added by *x*meanVal*, where meanVal is the mean of the image pixel intensity

      combining all color channels.'
    defaultValue: '0.0'
    types:
    - <xref:float>, <xref:default 0.0>
  - name: contrast_radius
    description: 'Radius for contrast change. Must be

      set within [0.0, 1.0]. For example, assume contrast_radius = 0.2, a random

      number *x* is uniformly drawn from [-0.2, 0.2], and every pixel''s value is

      multiplied by *1+x*.'
    defaultValue: '0.0'
    types:
    - <xref:float>, <xref:default 0.0>
  - name: saturation_radius
    description: 'Radius for saturation change. Only for

      color images and must be set within [0.0, 1.0]. For example, assume

      saturation_radius = 0.2, a random number *x* is uniformly drawn from [-0.2,
      0.2],

      and every pixel''s saturation is multiplied by *1+x*.'
    defaultValue: '0.0'
    types:
    - <xref:float>, <xref:default 0.0>
  return:
    description: A dictionary-like object describing the mean transform
- uid: cntk.io.transforms.crop
  name: crop
  summary: Crop transform that can be used to pass to *map_features*
  signature: crop(crop_type='center', crop_size=0, side_ratio=0.0, area_ratio=0.0,
    aspect_ratio=1.0, jitter_type='none')
  parameters:
  - name: crop_type
    description: '''center'', ''randomside'', ''randomarea'',

      or ''multiview10''.  ''randomside'' and ''randomarea'' are usually used during

      training.  If either ''randomside'' and ''randomarea'' are set, Horizontal

      flipping will be enabled and the image will be randomly flipped in

      horizontal direction. Horizontal flipping is another popular data augmentation

      technique and should be used if images exhibit vertical symmetry,

      for example, like many real-world objects.

      ''center'' and ''multiview10'' are usually used during testing.

      Random cropping is a popular data augmentation technique used to improve

      generalization of the DNN.'
    defaultValue: center
    types:
    - <xref:str>, <xref:default 'center'>
  - name: crop_size
    description: 'crop size in pixels. Ignored if set to 0.

      When crop_size is non-zero, for example, crop_size=256, it means a cropping

      window of size 256x256 pixels will be taken. If one want to crop with

      non-square shapes, specify crop_size=(256,224) will crop 256x224 (width x height)

      pixels. *When crop_size is specified, side_ratio, area_ratio and aspect_ratio

      will be ignored.*'
    defaultValue: '0'
    types:
    - <xref:int>, <xref:default 0>
  - name: side_ratio
    description: 'It specifies the ratio of final image

      side (width or height) with respect to the original image. Ignored if set

      to 0.0. Otherwise, must be set within *(0,1]*. For example, with an input

      image size of 640x480, side_ratio of 0.5 means we crop a square region

      (if aspect_ratio is 1.0) of the input image, whose width and height are

      equal to 0.5*min(640, 480) = 240. To enable scale jitter (a popular data

      augmentation technique), use tuple like side_ratio=(0.5,0.75),

      which means the crop will have size between 240 (0.5*min(640, 480)) and 360

      (0.75*min(640, 480)).'
    defaultValue: '0.0'
    types:
    - <xref:float>, <xref:default 0.0>
  - name: area_ratio
    description: 'It specifies the area ratio of final image

      with respect to the original image. Ignored if set to 0.0. Otherwise, must be

      set within *(0,1]*. For example, for an input image size of 200x150 pixels,

      the area is 30,000. If area_ratio is 0.3333, we crop a square region (if

      aspect_ratio is 1.0) with width and height equal to sqrt(30,000*0.3333)=100.

      To enable scale jitter, use tuple such as area_ratio=(0.3333,0.8),

      which means the crop will have size between 100 (sqrt(30,000*0.3333)) and

      155 (sqrt(30,000*0.8)).'
    defaultValue: '0.0'
    types:
    - <xref:float>, <xref:default 0.0>
  - name: aspect_ratio
    description: 'It specifies the aspect ratio (width/height

      or height/width) of the crop window. It is recommended to set it within *(0,1]*,

      although a value greater than 1 is also allowed. In practice, values of 1.333(4/3)

      or 0.75(3/4) should cause the same aspect deformation effect. For example, if

      due to size_ratio the crop size is 240x240, an aspect_ratio of 0.64 will change

      the window size to non-square: 192x300 or 300x192, each having 50% chance. Note

      the area of the crop window does not change. To enable aspect ratio jitter,
      use

      tuple such as aspect_ratio=(0.64,1.0), which means the crop will have size

      between 192x300 (or equally likely 300x192) and 240x240. One can also use

      aspect_ratio=(0.64,1.5625), which will create rectangles in the same aspect
      ratio

      range, although there is a subtle difference due to uniratio sampling between

      the boundary of the specified ratio range.'
    defaultValue: '1.0'
    types:
    - <xref:float>, <xref:default 1.0>
  - name: jitter_type
    description: 'crop scale jitter type, possible

      values are ''none'' and ''uniratio''. ''uniratio'' means uniform distributed
      jitter

      scale between the minimum and maximum ratio values.'
    defaultValue: none
    types:
    - <xref:str>, <xref:default 'none'>
  return:
    description: A dictionary-like object describing the crop transform
- uid: cntk.io.transforms.mean
  name: mean
  summary: Mean transform that can be used to pass to *map_features* for data augmentation.
  signature: mean(filename)
  parameters:
  - name: filename
    description: 'file that stores the mean values for each pixel

      in OpenCV matrix XML format'
    types:
    - <xref:str>
  return:
    description: A dictionary-like object describing the mean transform
    types:
    - <xref:dict>
- uid: cntk.io.transforms.scale
  name: scale
  summary: Scale transform that can be used to pass to *map_features* for data augmentation.
  signature: scale(width, height, channels, interpolations='linear', scale_mode='fill',
    pad_value=-1)
  parameters:
  - name: width
    description: width of the image in pixels
    types:
    - <xref:int>
  - name: height
    description: height of the image in pixels
    types:
    - <xref:int>
  - name: channels
    description: channels of the image
    types:
    - <xref:int>
  - name: interpolations
    description: 'possible values are

      ''nearest'', ''linear'', ''cubic'', and ''lanczos'''
    defaultValue: linear
    types:
    - <xref:str>, <xref:default 'linear'>
  - name: scale_mode
    description: '''fill'', ''crop'' or ''pad''.

      ''fill'' - warp the image to the given target size.

      ''crop'' - resize the image''s shorter side to the given target size and crop
      the overlap.

      ''pad''  - resize the image''s larger side to the given target size, center
      it and pad the rest'
    defaultValue: fill
    types:
    - <xref:str>, <xref:default 'fill'>
  - name: pad_value
    description: '-1 or int value. The pad value used for the ''pad'' mode.

      If set to -1 then the border will be replicated.'
    defaultValue: '-1'
    types:
    - <xref:int>, <xref:default -1>
  return:
    description: A dictionary-like object describing the scale transform
