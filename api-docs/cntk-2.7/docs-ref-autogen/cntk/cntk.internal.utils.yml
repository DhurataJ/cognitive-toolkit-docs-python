### YamlMime:UniversalReference
api_name: []
items:
- children:
  - cntk.internal.utils.eval
  - cntk.internal.utils.get_data_type
  - cntk.internal.utils.get_python_function_arguments
  - cntk.internal.utils.map_function_arguments
  fullName: cntk.internal.utils
  langs:
  - python
  module: cntk.internal.utils
  name: utils
  type: module
  uid: cntk.internal.utils
- fullName: cntk.internal.utils.eval
  langs:
  - python
  module: cntk.internal.utils
  name: eval(op, arguments=None, precision=None, device=None, backward_pass=False,
    expected_backward=None)
  summary: 'It evaluates `op` on the data provided by the reader. This is useful

    mainly to explore the operators and for convenient unit testing.'
  syntax:
    content: eval(op, arguments=None, precision=None, device=None, backward_pass=False,
      expected_backward=None)
    parameters:
    - description: operation to evaluate
      id: op
      type:
      - <xref:cntk.ops.functions.Function>
    - defaultValue: None
      description: "maps variables to their input data. The\ninterpretation depends\
        \ on the input type:\n\n   * *dict*: keys are input variable or names, and\
        \ values are the input data. \n\n   * any other type: if node has a unique\
        \ input, `arguments` is mapped to this input. For nodes with more than one\
        \ input, only *dict* is allowed. \n\nIn both cases, every sample in the data\
        \ will be interpreted\nas a new sequence. To mark samples as continuations\
        \ of the\nprevious sequence, specify `arguments` as *tuple*: the\nfirst element\
        \ will be used as `arguments`, and the second one will\nbe used as a list\
        \ of bools, denoting whether a sequence is a new\none (*True*) or a continuation\
        \ of the previous one (*False*).\nData should be either NumPy arrays or a\n\
        <xref:cntk.io.MinibatchData> instance."
      id: arguments
    - defaultValue: None
      description: 'if None, every sequence is

        treated as a new sequence. Otherwise, it is interpreted as a list of

        Booleans that tell whether a sequence is a new sequence (*True*) or a

        continuation of the sequence in the same slot of the previous

        minibatch (*False*)'
      id: seq_starts
      type:
      - list of bools
      - None
    - defaultValue: None
      description: 'precision being ''float32'', ''float64'', ''float16'', or

        None, in which case it will be determined by inspecting the operator

        (costly)'
      id: precision
      type:
      - str
      - None
    - defaultValue: 'False'
      description: 'device

        this value should be put on'
      id: device
      type:
      - <xref:cntk.device.DeviceDescriptor>, default None
    - defaultValue: None
      description: whether a backward pass is performed
      id: backward_pass
      type:
      - bool, optional
    - description: 'keys are variables for which to

        compute a backward ouptut. By default (None) all entries from

        ''arguments'' are used'
      id: expected_backward
      type:
      - dict
      - None
    return:
      description: mapping of output variables to their values.
  type: function
  uid: cntk.internal.utils.eval
- fullName: cntk.internal.utils.get_data_type
  langs:
  - python
  module: cntk.internal.utils
  name: get_data_type(*args)
  summary: 'Calculates the highest precision numpy data type of the provided parameters.

    If the parameter is a Function instance, it calculates it based on its

    inputs. placeholders are ignored in the type determination.'
  syntax:
    content: get_data_type(*args)
    parameters:
    - description: input
      id: args
      type:
      - number, list, NumPy array, <xref:cntk.variables.Variable>,
      - <xref:cntk.ops.functions.Function>
    return:
      description: np.float32, np.float64, np.float16 or None
  type: function
  uid: cntk.internal.utils.get_data_type
- fullName: cntk.internal.utils.get_python_function_arguments
  langs:
  - python
  module: cntk.internal.utils
  name: get_python_function_arguments(f)
  summary: Helper to get the parameter names and annotations of a Python function.
  syntax:
    content: get_python_function_arguments(f)
    parameters:
    - id: f
  type: function
  uid: cntk.internal.utils.get_python_function_arguments
- fullName: cntk.internal.utils.map_function_arguments
  langs:
  - python
  module: cntk.internal.utils
  name: map_function_arguments(params, params_dict, *args, **kwargs)
  summary: 'Helper to determine the argument map for use with various call operations.

    Returns a dictionary from parameters to whatever arguments are passed.

    Accepted are both positional and keyword arguments.

    This mimics Python''s argument interpretation, except that keyword arguments are
    not optional.

    This does not require the arguments to be Variables or Functions. It is also called
    by train_minibatch() and @Signature.'
  syntax:
    content: map_function_arguments(params, params_dict, *args, **kwargs)
    parameters:
    - id: params
    - id: params_dict
  type: function
  uid: cntk.internal.utils.map_function_arguments
references:
- fullName: cntk.internal.utils.eval
  isExternal: false
  name: eval(op, arguments=None, precision=None, device=None, backward_pass=False,
    expected_backward=None)
  parent: cntk.internal.utils
  uid: cntk.internal.utils.eval
- fullName: cntk.internal.utils.get_data_type
  isExternal: false
  name: get_data_type(*args)
  parent: cntk.internal.utils
  uid: cntk.internal.utils.get_data_type
- fullName: cntk.internal.utils.get_python_function_arguments
  isExternal: false
  name: get_python_function_arguments(f)
  parent: cntk.internal.utils
  uid: cntk.internal.utils.get_python_function_arguments
- fullName: cntk.internal.utils.map_function_arguments
  isExternal: false
  name: map_function_arguments(params, params_dict, *args, **kwargs)
  parent: cntk.internal.utils
  uid: cntk.internal.utils.map_function_arguments
- fullName: <xref:cntk.device.DeviceDescriptor>, default None
  name: DeviceDescriptor>, default None
  spec.python:
  - fullName: <xref:cntk.device.DeviceDescriptor>
    name: DeviceDescriptor>
    uid: <xref:cntk.device.DeviceDescriptor>
  - fullName: ', '
    name: ', '
  - fullName: default None
    name: default None
    uid: default None
  uid: <xref:cntk.device.DeviceDescriptor>, default None
- fullName: bool, optional
  name: bool, optional
  spec.python:
  - fullName: bool
    name: bool
    uid: bool
  - fullName: ', '
    name: ', '
  - fullName: optional
    name: optional
    uid: optional
  uid: bool, optional
- fullName: number, list, NumPy array, <xref:cntk.variables.Variable>,
  name: number, list, NumPy array, Variable>,
  spec.python:
  - fullName: number
    name: number
    uid: number
  - fullName: ', '
    name: ', '
  - fullName: list
    name: list
    uid: list
  - fullName: ', '
    name: ', '
  - fullName: NumPy array
    name: NumPy array
    uid: NumPy array
  - fullName: ', '
    name: ', '
  - fullName: <xref:cntk.variables.Variable>,
    name: Variable>,
    uid: <xref:cntk.variables.Variable>,
  uid: number, list, NumPy array, <xref:cntk.variables.Variable>,
